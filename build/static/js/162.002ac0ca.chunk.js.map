{"version":3,"file":"static/js/162.002ac0ca.chunk.js","mappings":"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","sources":["utils/MDEToolbarImgIcon.jsx","components/MDE.jsx","components/discussion/DiscussionBox.jsx","helper/converter.js","helper/htmlToJsx.js","components/skeletons/DetailSkeleton.jsx","helper/isTouchDevice.js","components/detail/MoreOptionMenu.jsx","components/detail/SideReactionBar.jsx","components/post/OtherPostItem.jsx","components/detail/DetailRightContent.jsx","components/discussion/Discussion.jsx","hooks/useClickLikeToComment.js","components/comment/ManageComment.jsx","components/comment/CommentItem.jsx","components/comment/AllComment.jsx","components/detail/MainContent.jsx","components/detail/DetailElements.jsx","pages/PostDetails.jsx"],"sourcesContent":["import { Box, Input } from '@chakra-ui/react';\nimport React from 'react';\nimport { BsCardImage } from 'react-icons/bs';\n\nconst MDEToolbarImgIcon = ({ onChange }) => {\n   const handleClick = () => {\n      document.querySelector('.toolbar_img_command').click();\n   };\n\n   return (\n      <Box\n         onClick={handleClick}\n         justify='center'\n         m='0'\n         cursor='pointer'\n         w='35px'\n         h='30px'\n         pos='absolute'\n         display='flex'\n         alignItems='center'\n         justifyContent='center'\n      >\n         <Input\n            className='toolbar_img_command'\n            opacity={0}\n            visibility='hidden'\n            w='0'\n            h='0'\n            type='file'\n            accept='image/jpeg, image/png, image/jpg , image/webp, image/gif'\n            onChange={onChange}\n         />\n         <BsCardImage\n            size={20}\n            style={{ position: 'absolute', cursor: 'pointer', zIndex: '1' }}\n         />\n      </Box>\n   );\n};\n\nexport default MDEToolbarImgIcon;\n","import React, { useEffect, useState } from \"react\";\nimport ReactMde from \"react-mde\";\nimport { useDispatch } from \"react-redux\";\nimport { getDefaultToolbarCommands } from \"react-mde\";\nimport { Box } from \"@chakra-ui/react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { uploadImage } from \"../lib/api\";\nimport converter from \"../helper/converter\";\nimport MDEToolbarImgIcon from \"../utils/MDEToolbarImgIcon\";\nimport { setMDEValueToStore } from \"../store/post/postData\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport \"../styles/customizeMDE.scss\";\nimport { BsCodeSquare } from \"react-icons/bs\";\n\nconst customToolbarCommands = () => {\n  const commands = getDefaultToolbarCommands();\n  commands[1].splice(3, 1, \"code-block\", \"img_url\");\n  return commands;\n};\n\nconst codeBlock = {\n  name: \"code-block\",\n  icon: () => <BsCodeSquare size={18} style={{ position: \"absolute\" }} />,\n  execute: (opts) => {\n    opts.textApi.replaceSelection(\"```\\n Enter code here... \\n```\");\n  },\n};\n\nconst MDE = ({ MDEValue, setMDEValue, isSubmitting, setUploadingImg }) => {\n  const [value, setValue] = useState(MDEValue || \"\");\n  const [selectedTab, setSelectedTab] = useState(\"write\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (setMDEValue) {\n      setMDEValue(value); //for comment\n    } else {\n      dispatch(setMDEValueToStore(value)); //for postData to publish or edit\n    }\n  }, [value, dispatch, setMDEValue]);\n\n  useEffect(() => {\n    if (!MDEValue) {\n      setValue(MDEValue);\n    } // setting MDEValue to useState doesn't trigger again after initial render so I set empty string to value if it's empty\n  }, [MDEValue]);\n\n  useEffect(() => {\n    if (isSubmitting) {\n      document.querySelector(\".mde-text\").disabled = true;\n    } else {\n      document.querySelector(\".mde-text\").disabled = false;\n    }\n  }, [isSubmitting]);\n\n  const mdeImgUploadHandler = (e) => {\n    const image = e.target.files[0];\n\n    if (image) {\n      document.querySelector(\".mde-text\").disabled = true;\n      setUploadingImg(true);\n      setValue((prevVal) =>\n        prevVal.replace(\"![](img_url)\", \"![](uploading...)\")\n      );\n\n      const selectedImgPath = `images/${img.name}${nanoid()}`;\n\n      uploadImage(image, selectedImgPath)\n        .then((url) => {\n          document.querySelector(\".mde-text\").disabled = false;\n\n          setValue((prevVal) =>\n            prevVal.replace(\"![](uploading...)\", `![](${url})`)\n          );\n\n          setUploadingImg(false);\n        })\n        .catch((err) => console.log(err));\n\n      e.target.value = \"\"; // otherwise input event doesn't trigger again when user add the same file\n    }\n  };\n\n  const img = {\n    name: \"image_url\",\n    icon: () => <MDEToolbarImgIcon onChange={mdeImgUploadHandler} />,\n    execute: (opts) => {\n      opts.textApi.replaceSelection(\"![](img_url)\");\n    },\n  };\n\n  return (\n    <Box w=\"100%\" fontFamily=\"monospace\">\n      <ReactMde\n        commands={{\n          \"code-block\": codeBlock,\n          img_url: img,\n        }}\n        loadingPreview=\"loading...\"\n        toolbarCommands={customToolbarCommands()}\n        value={value}\n        onChange={setValue}\n        selectedTab={selectedTab}\n        onTabChange={setSelectedTab}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter().makeHtml(markdown))\n        }\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(MDE);\n","import React, { useEffect, useState } from \"react\";\nimport { Box, HStack, Spinner, useColorModeValue } from \"@chakra-ui/react\";\nimport converter from \"../../helper/converter\";\nimport { PrimaryBtn, SecondaryBtn } from \"../../utils/Buttons\";\nimport MDE from \"../MDE\";\nimport \"../../styles/customizeMDE.scss\";\nimport { htmlToJsx } from \"../../helper/htmlToJsx\";\nimport { updateComment } from \"../../lib/api\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Timestamp } from \"firebase/firestore\";\nimport { useAuth } from \"../../context/auth\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { removeFromLocalStorage } from \"../../helper/localStorage\";\nimport { setLoginAlert } from \"../../store/loginAlert\";\nimport hljs from \"highlight.js\";\n\nconst DiscussionBox = ({\n  postId,\n  commentId,\n  showDismiss,\n  onDismiss,\n  valueToEdit,\n  transformedComments,\n  repliedUserId,\n}) => {\n  const user = useAuth();\n  const dispatch = useDispatch();\n\n  const { transformedData } = useSelector((state) => state.transformedData);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [uploadingImg, setUploadingImg] = useState(false);\n  const [mdeTab, setMdeTab] = useState(\"write\");\n  const [MDEValue, setMDEValue] = useState(valueToEdit || \"\");\n\n  const comments = transformedData?.find(\n    (data) => data.id === postId\n  )?.comments;\n\n  const hasValue = MDEValue.trim();\n\n  const mdeTabChangeHandler = () => {\n    setMdeTab((prev) => (prev === \"write\" ? \"preview\" : \"write\"));\n  };\n\n  useEffect(() => {\n    const textArea = document.querySelector(\".mde-text\");\n\n    if (!user) {\n      document.querySelector(\".mde-header\").style.display = \"none\";\n      textArea.readOnly = true; // not allow cursor if not authenticated\n    }\n\n    const checkUser = () => {\n      if (!user) {\n        dispatch(setLoginAlert(true));\n      }\n    };\n\n    textArea?.addEventListener(\"click\", checkUser);\n\n    return () => textArea?.removeEventListener(\"click\", checkUser);\n  }, [user, dispatch]); // hide mde-header if user is not authenticated\n\n  // insert placeholder\n  useEffect(() => {\n    const textBoxes = [...document.querySelectorAll(\".mde-text\")];\n    textBoxes.map((textbox, idx) =>\n      idx === 0\n        ? (textbox.placeholder = \"Add to the discussion...\")\n        : (textbox.placeholder = \"Reply...\")\n    );\n  }, [mdeTab]);\n\n  useEffect(() => {\n    if (mdeTab === \"preview\") {\n      hljs.highlightAll();\n    }\n  }, [mdeTab]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitting(true);\n\n    const createdAt = Timestamp.now();\n    const newComment = {\n      value: MDEValue,\n      replies: {},\n      createdAt,\n      userId: user.userId,\n      commentId: nanoid(),\n      likes: [],\n    };\n\n    let modifiedComments = [];\n\n    if (valueToEdit) {\n      modifiedComments = transformedComments(comments, MDEValue);\n    } else if (commentId) {\n      modifiedComments = comments.map((comment) =>\n        comment.commentId === commentId ||\n        Object.values(comment.replies).find(\n          (cmt) => cmt.commentId === commentId\n        )\n          ? {\n              ...comment,\n              replies: {\n                ...comment.replies,\n                [nanoid()]: {\n                  ...newComment,\n                  repliedUserId,\n                  repliedCommentId: commentId,\n                },\n              },\n            }\n          : comment\n      );\n    } else {\n      modifiedComments = [...comments, newComment];\n    }\n\n    updateComment(modifiedComments, postId)\n      .then((_) => {\n        setSubmitting(false);\n        setMDEValue(\"\");\n        // onDismiss && onDismiss(); => close discussionBox immediately without accepting new state value\n        onDismiss && setTimeout(onDismiss, 100); // need new state value ('submitting = false') to disable || enable to MDE after state change\n        setMdeTab(\"write\");\n        removeFromLocalStorage(\"commentItemToManage\");\n        // console.log('added comment successfully');\n      })\n      .catch((err) => {\n        setSubmitting(false);\n        console.log(err);\n      });\n  };\n\n  const shadow = useColorModeValue(\n    \"0 0 0 1px rgb(212 212 212)\",\n    \"0 0 0 1px rgb(255 255 255 / 15%)\"\n  );\n\n  const boxBoxShadow = useColorModeValue(\n    \"0 0 0 2px rgb(59 73 223)\",\n    \"0 0 0 2px rgb(129 140 248) \"\n  );\n\n  return (\n    <Box className=\"mde-preview\">\n      {mdeTab === \"write\" && (\n        <Box\n          borderRadius=\"5px\"\n          _focusWithin={{\n            boxShadow: user && boxBoxShadow,\n          }}\n          boxShadow={shadow}\n          overflow=\"hidden\"\n          className=\"discussion-box mde-preview\"\n        >\n          <MDE\n            MDEValue={MDEValue}\n            setMDEValue={setMDEValue}\n            isSubmitting={submitting}\n            setUploadingImg={setUploadingImg}\n          />\n        </Box>\n      )}\n\n      {mdeTab === \"preview\" && (\n        <Box\n          minH=\"192px\"\n          borderRadius=\"5px\"\n          padding=\"10px !important\"\n          className=\"mde-preview-content\"\n          boxShadow={shadow}\n          fontSize={[\"1rem\", \"1.1rem\"]}\n          sx={{ p: { marginBottom: \"5px !important\" } }}\n        >\n          {htmlToJsx(converter().makeHtml(MDEValue))}\n        </Box>\n      )}\n\n      {/* buttons */}\n      <HStack justify=\"flex-end\" w=\"100%\" mt=\".5rem\">\n        {showDismiss && (\n          <SecondaryBtn\n            onClick={onDismiss}\n            disabled={uploadingImg || submitting}\n          >\n            Dismiss\n          </SecondaryBtn>\n        )}\n\n        <SecondaryBtn\n          disabled={\n            (!hasValue && mdeTab === \"write\") || uploadingImg || submitting\n          }\n          onClick={mdeTabChangeHandler}\n        >\n          {mdeTab === \"write\" ? \"Preview\" : \"Edit\"}\n        </SecondaryBtn>\n\n        <PrimaryBtn\n          onClick={handleSubmit}\n          bg=\"light.primary\"\n          disabled={!hasValue || uploadingImg || submitting}\n        >\n          {submitting ? (\n            <>\n              <Spinner size=\"sm\" mr=\"1\" /> Submitting\n            </>\n          ) : (\n            \"Submit\"\n          )}\n        </PrimaryBtn>\n      </HStack>\n    </Box>\n  );\n};\n\nexport default DiscussionBox;\n","import * as Showdown from 'showdown';\n\nconst converter = () => {\n   const converter = new Showdown.Converter({\n      tables: true,\n      simplifiedAutoLink: true,\n      strikethrough: true,\n      tasklists: true,\n   });\n   return converter;\n};\n\nexport default converter;\n","const parse = require('html-react-parser');\n\nexport const htmlToJsx = (html) => {\n   const reactElement = parse(html);\n   return reactElement;\n};\n","import {\n   Box,\n   HStack,\n   Skeleton,\n   SkeletonCircle,\n   SkeletonText,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport useSkeletonColor from '../../hooks/useSkeletonColor';\n\nconst DetailSkeleton = () => {\n   const skeletonColor = useSkeletonColor();\n\n   return (\n      <Box\n         bg='transparent'\n         px='.5rem'\n         mx='auto'\n         maxW='650px'\n         flex='1'\n         mt='.5rem'\n      >\n         <HStack>\n            <SkeletonCircle size='10' {...skeletonColor} />\n            <SkeletonText\n               mt='4'\n               noOfLines={2}\n               spacing='2'\n               w='30%'\n               {...skeletonColor}\n            />\n         </HStack>\n         <Skeleton h='15px' mt={3} {...skeletonColor} />\n         <Skeleton h='15px' mt={3} {...skeletonColor} />\n      </Box>\n   );\n};\n\nexport default DetailSkeleton;\n","export const isTouchDevice = () => {\n   return (\n      'ontouchstart' in window ||\n      navigator.MaxTouchPoints > 0 ||\n      navigator.msMaxTouchPoints > 0\n   );\n};\n","import {\n   HStack,\n   IconButton,\n   Menu,\n   MenuButton,\n   MenuList,\n   Text,\n   useClipboard,\n   useColorModeValue,\n   useToast,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { RiFileCopy2Fill } from 'react-icons/ri';\nimport { Option } from '../../assets/icons';\nimport { isTouchDevice } from '../../helper/isTouchDevice';\nimport CustomMenuItem from '../../utils/CustomMenuItem';\n\nconst MoreOptionMenu = ({ iconStyles, postTitle, reactionIconColor }) => {\n   const toast = useToast();\n   const postURL = window.location.href;\n\n   const { onCopy } = useClipboard(postURL);\n\n   const handleCopyLink = () => {\n      onCopy(); // copy to clipboard\n\n      const id = 'toast';\n\n      if (!toast.isActive(id)) {\n         toast({\n            title: 'Copied to Clipboard',\n            position: 'top-right',\n            duration: 1000,\n            status: 'success',\n            isClosable: true,\n            id,\n         });\n      }\n   };\n\n   const handleShareVia = (via) => {\n      let url = '';\n      switch (via) {\n         case 'twitter':\n            url = `https://twitter.com/share?url=${postURL}&text=${postTitle}`;\n            break;\n         case 'linkedin':\n            url = `https://www.linkedin.com/shareArticle?url=${postURL}&title=${postTitle}`;\n            break;\n         case 'facebook':\n            url = `https://www.facebook.com/sharer.php?u=${postURL}`;\n            break;\n         default:\n            return;\n      }\n\n      window.open(url, '_blank'); // open link in new tab\n   };\n\n   const nativeShareVia = async () => {\n      try {\n         await navigator.share({ title: postTitle, url: postURL });\n         // console.log('successfully share url');\n      } catch (err) {\n         console.log(err);\n      }\n   };\n\n   return (\n      <Menu autoSelect={false} isLazy>\n         <MenuButton\n            _hover={{\n               '.moreBtn': { bg: useColorModeValue('gray.100', 'dark.cardBg') },\n            }}\n         >\n            <IconButton\n               as='div'\n               icon={<Option fill={reactionIconColor} />}\n               {...iconStyles}\n               className='moreBtn'\n            />\n         </MenuButton>\n\n         <MenuList\n            p='.5rem'\n            minW={{ base: '0 !important' }}\n            w='250px'\n            bg={useColorModeValue('light.cardBg', 'dark.cardBg')}\n         >\n            <CustomMenuItem onClick={handleCopyLink}>\n               <HStack justify='space-between' w='100%'>\n                  <Text>Copy Link</Text> <RiFileCopy2Fill size={20} />\n               </HStack>\n            </CustomMenuItem>\n\n            {!isTouchDevice() && (\n               <>\n                  <CustomMenuItem onClick={() => handleShareVia('twitter')}>\n                     Share to Twitter\n                  </CustomMenuItem>\n\n                  <CustomMenuItem onClick={() => handleShareVia('linkedin')}>\n                     Share to Linkedin\n                  </CustomMenuItem>\n\n                  <CustomMenuItem onClick={() => handleShareVia('facebook')}>\n                     Share to Facebook\n                  </CustomMenuItem>\n               </>\n            )}\n\n            {isTouchDevice() && (\n               <CustomMenuItem onClick={nativeShareVia}>\n                  Share post via...\n               </CustomMenuItem>\n            )}\n         </MenuList>\n      </Menu>\n   );\n};\n\nexport default MoreOptionMenu;\n","import { Flex, IconButton, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\nimport useClickReactToPost from '../../hooks/useClickReactToPost';\nimport { useAuth } from '../../context/auth';\nimport MoreOptionMenu from './MoreOptionMenu';\nimport {\n   Heart,\n   AlreadyHearted,\n   Unicorn,\n   AlreadyUnicorned,\n   Save,\n   AlreadySaved,\n} from '../../assets/icons';\n\nconst styles = {\n   direction: { base: 'row', md: 'column' },\n   align: 'center',\n   fontSize: '15px',\n   cursor: 'pointer',\n};\n\nconst iconStyles = {\n   bg: 'transparent',\n   borderRadius: 'full',\n   mb: { base: '0', md: '2' },\n   mr: { base: '2', md: '0' },\n};\n\nconst SideReactionBar = ({ postDetail }) => {\n   const user = useAuth();\n\n   const { clickReactHandler: clickHeart, updatingReact: updatingHeart } =\n      useClickReactToPost(postDetail.heart, postDetail.id, 'heart');\n\n   const { clickReactHandler: clickUnicorn, updatingReact: updatingUnicorn } =\n      useClickReactToPost(postDetail.unicorn, postDetail.id, 'unicorn');\n\n   const { clickReactHandler: clickSave, updatingReact: updatingSave } =\n      useClickReactToPost(postDetail.saved, postDetail.id, 'saved');\n\n   const alreadyHeart = postDetail.heart?.includes(user?.userId);\n   const alreadyUnicorned = postDetail.unicorn?.includes(user?.userId);\n   const alreadySaved = postDetail.saved?.includes(user?.userId);\n\n   const totalHeart = postDetail.heart?.length || 0;\n   const totalUnicorn = postDetail.unicorn?.length || 0;\n   const totalSaved = postDetail.saved?.length || 0;\n\n   const reactionIconColor = useColorModeValue('#3d3d3d', '#d6d6d7');\n   const bg = useColorModeValue('rgb(255, 255, 255)', 'rgb(0, 0, 0)');\n\n   return (\n      <Flex\n         bg={{ base: bg, md: 'transparent' }}\n         boxShadow={{ base: '0 -1px 5px rgba(0,0,0,0.2)', md: 'none' }}\n         height={{ base: '3.5rem', md: 'auto' }}\n         width={{ base: '100vw', md: '50px' }}\n         position={{ base: 'fixed', md: 'sticky' }}\n         bottom={{ base: '0', md: 'unset' }}\n         left='0'\n         top={{ base: 'unset', md: '6rem' }}\n         zIndex='2'\n         direction={{ base: 'row', md: 'column' }}\n         align='center'\n         justify={{ base: 'space-around', md: 'flex-start' }}\n         gap='1rem'\n         me='1rem'\n      >\n         {!postDetail.draft && (\n            <Flex\n               {...styles}\n               onClick={clickHeart}\n               color={alreadyHeart && 'rgb(220 38 38)'}\n            >\n               <IconButton\n                  disabled={updatingHeart}\n                  icon={\n                     alreadyHeart ? (\n                        <AlreadyHearted />\n                     ) : (\n                        <Heart fill={reactionIconColor} />\n                     )\n                  }\n                  {...iconStyles}\n                  border={alreadyHeart && '2px solid rgb(220 38 38)'}\n                  bg={alreadyHeart ? 'rgb(220 38 38 / 10%)' : 'transparent'}\n                  _hover={{\n                     bg: 'rgb(220 38 38 / 10%)',\n                     svg: { fill: 'rgb(220 38 38)' },\n                  }}\n               />\n               {totalHeart}\n            </Flex>\n         )}\n\n         {!postDetail.draft && (\n            <Flex\n               {...styles}\n               onClick={clickUnicorn}\n               color={alreadyUnicorned && 'rgb(5 150 105)'}\n            >\n               <IconButton\n                  disabled={updatingUnicorn}\n                  icon={\n                     alreadyUnicorned ? (\n                        <AlreadyUnicorned />\n                     ) : (\n                        <Unicorn fill={reactionIconColor} />\n                     )\n                  }\n                  {...iconStyles}\n                  border={alreadyUnicorned && '2px solid rgb(5 150 105)'}\n                  bg={alreadyUnicorned ? 'rgb(5 150 105 / 10%)' : 'transparent'}\n                  _hover={{\n                     bg: 'rgb(5 150 105 / 10%)',\n                     svg: { fill: 'rgb(5 150 105)' },\n                  }}\n               />\n               {totalUnicorn}\n            </Flex>\n         )}\n\n         {!postDetail.draft && (\n            <Flex\n               {...styles}\n               onClick={clickSave}\n               color={alreadySaved && 'rgb(79 70 229)'}\n            >\n               <IconButton\n                  disabled={updatingSave}\n                  icon={\n                     alreadySaved ? (\n                        <AlreadySaved />\n                     ) : (\n                        <Save fill={reactionIconColor} />\n                     )\n                  }\n                  {...iconStyles}\n                  border={alreadySaved && '2px solid rgb(79 70 229)'}\n                  bg={alreadySaved ? 'rgb(79 70 229 / 10%)' : 'transparent'}\n                  _hover={{\n                     bg: 'rgb(79 70 229 / 10%)',\n                     svg: { fill: 'rgb(79 70 229)' },\n                  }}\n               />\n               {totalSaved}\n            </Flex>\n         )}\n\n         <Flex direction={{ base: 'row', md: 'column' }} align='center'>\n            <MoreOptionMenu\n               iconStyles={iconStyles}\n               postTitle={postDetail.title}\n               reactionIconColor={reactionIconColor}\n            />\n         </Flex>\n      </Flex>\n   );\n};\n\nexport default SideReactionBar;\n","import { Box, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { titleRoute } from \"../../helper/titleRoute\";\nimport useClickTag from \"../../hooks/useClickTag\";\nimport { setClickComment } from \"../../store/scrollDiscussion\";\nimport LangTag from \"../../utils/LangTag\";\n\nconst OtherPostItem = ({ username, title, tags, postId, isLastElement }) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleNavigate = (e) => {\n    e.stopPropagation();\n    dispatch(setClickComment(false));\n\n    navigate(`/${titleRoute(username, title, postId)}`);\n  };\n\n  const handleClickTag = useClickTag();\n\n  const borderBottom = useColorModeValue(\n    \"1px solid rgb(23 23 23 / 13%)\",\n    \"1px solid rgb(255 255 255 / 15%)\"\n  );\n\n  return (\n    <Box\n      mb=\".5rem\"\n      py=\".5rem\"\n      px=\"1rem\"\n      onClick={handleNavigate}\n      cursor=\"pointer\"\n      _hover={{\n        bg: useColorModeValue(\"light.cardBg\", \"dark.cardBg\"),\n      }}\n      borderBottom={!isLastElement && borderBottom}\n    >\n      <Text\n        fontWeight={600}\n        _hover={{\n          color: useColorModeValue(\"light.headingHover\", \"dark.headingHover\"),\n        }}\n        cursor=\"pointer\"\n        onClick={handleNavigate}\n      >\n        {title}\n      </Text>\n\n      <Wrap spacing=\".2rem\" pt=\".3rem\">\n        {tags?.map((tag) => (\n          <WrapItem\n            key={nanoid()}\n            onClick={(e) => handleClickTag(e, tag.tagName)}\n          >\n            <LangTag tag={tag} />\n          </WrapItem>\n        ))}\n      </Wrap>\n    </Box>\n  );\n};\n\nexport default OtherPostItem;\n","import React from \"react\";\nimport { Box, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport UserProfilePopup from \"../profile/UserProfilePopup\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useNavigate } from \"react-router-dom\";\nimport OtherPostItem from \"../post/OtherPostItem\";\nimport { useAuth } from \"../../context/auth\";\n\nconst DetailRightContent = ({\n  currentUserProfile,\n  otherPosts,\n  userId,\n  display,\n  m,\n  trandingOnDevCommunity,\n}) => {\n  const navigate = useNavigate();\n  const user = useAuth();\n\n  const cardColor = useColorModeValue(\n    \"light.cardSecondaryBg\",\n    \"dark.cardSecondaryBg\"\n  );\n\n  const nameColor = useColorModeValue(\n    \"light.headingHover\",\n    \"dark.headingHover\"\n  );\n\n  const postsToShow =\n    otherPosts.length !== 0 ? otherPosts : trandingOnDevCommunity;\n\n  return (\n    <Box\n      m={m}\n      flex=\"1\"\n      ms={{ xl: \"1rem\" }}\n      pos=\"sticky\"\n      top=\"4rem\"\n      display={display}\n    >\n      <UserProfilePopup\n        w=\"100%\"\n        p=\"1rem\"\n        m={{ base: \"0\", md: \"1px\" }}\n        borderRadius={{ base: \"0\", md: \"5px\" }}\n        boxShadow={useColorModeValue(\n          \"0 0 0 1px rgb(23 23 23 / 10%)\",\n          \"0 0 0 1px rgb(255 255 255 / 15%)\"\n        )}\n        backgroundHeight=\"50px\"\n        background={currentUserProfile.background}\n        profile={currentUserProfile.profile}\n        name={currentUserProfile.name}\n        username={currentUserProfile.username}\n        bio={currentUserProfile.bio}\n        work={currentUserProfile.work}\n        location={currentUserProfile.location}\n        education={currentUserProfile.education}\n        joined={currentUserProfile.createdAt}\n        id={userId}\n        currentUserId={user?.userId}\n        followers={currentUserProfile.followers || []}\n      />\n\n      <Box\n        borderRadius={{ base: \"0\", md: \"5px\" }}\n        className=\"shadow\"\n        mt=\"1rem\"\n        overflow=\"hidden\"\n        bg={cardColor}\n        py=\".5rem\"\n      >\n        <Text fontSize=\"1.3rem\" mb=\"1rem\" fontWeight={600} ms=\"1rem\">\n          {otherPosts.length ? \"More from\" : \"Trending on\"}{\" \"}\n          <Text\n            as=\"span\"\n            color={nameColor}\n            cursor=\"pointer\"\n            onClick={() =>\n              otherPosts.length\n                ? navigate(`/${currentUserProfile.username}`)\n                : navigate(\"/\")\n            }\n          >\n            {otherPosts.length\n              ? currentUserProfile.name\n              : \"DEV Community 👩‍💻👨‍💻🔥\"}\n          </Text>\n        </Text>\n\n        {postsToShow.map((postData, idx) => (\n          <OtherPostItem\n            key={nanoid()}\n            username={postData.username}\n            title={postData.title}\n            tags={postData.tags}\n            postId={postData.id}\n            isLastElement={idx === postsToShow.length - 1}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default DetailRightContent;\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport DiscussionBox from './DiscussionBox';\nimport { calcTotalDiscussion } from '../../helper/calculateTotal';\n\nconst Discussion = ({ postId, comments, discussionBoxRef }) => {\n   return (\n      <Box mt='1.5rem' ref={discussionBoxRef}>\n         <Heading fontSize={{ base: '1.7rem', md: '2rem' }} mb={3}>\n            Discussion ({calcTotalDiscussion(comments)})\n         </Heading>\n         <DiscussionBox postId={postId} />\n      </Box>\n   );\n};\n\nexport default Discussion;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateComment } from '../lib/api';\nimport { setCurrentComments } from '../store/comment/currentComments';\nimport { setLoginAlert } from '../store/loginAlert';\n\nconst useClickLikeToComment = (currentUserId, postId) => {\n   const dispatch = useDispatch();\n\n   const [updatingLike, setUpdatingLike] = useState(false);\n\n   const handleClickLike = (comments, commentId) => {\n      // when click like multiple comment item quickly, previous comment array is not update yet\n      // so I put previous trnasformed comment arr to redux store and use them in the next time\n\n      if (!currentUserId) {\n         dispatch(setLoginAlert(true));\n         return;\n      }\n\n      setUpdatingLike(true);\n\n      const externalComments = comments.map((comment) =>\n         comment.commentId === commentId\n            ? {\n                 ...comment,\n                 likes: comment.likes.includes(currentUserId)\n                    ? comment.likes.filter((id) => id !== currentUserId)\n                    : [...comment.likes, currentUserId],\n              }\n            : comment\n      );\n\n      const modifiedComments = externalComments.map((comment) => ({\n         ...comment,\n         replies: {\n            ...Object.values(comment.replies).map((cmt) =>\n               cmt.commentId === commentId\n                  ? {\n                       ...cmt,\n                       likes: cmt.likes.includes(currentUserId)\n                          ? cmt.likes.filter((id) => id !== currentUserId)\n                          : [...cmt.likes, currentUserId],\n                    }\n                  : cmt\n            ),\n         },\n      }));\n\n      dispatch(setCurrentComments(modifiedComments));\n\n      updateComment(modifiedComments, postId)\n         .then((_) => {\n            setUpdatingLike(false);\n            // console.log('updated like');\n         })\n         .catch((err) => {\n            setUpdatingLike(false);\n            console.log(err);\n         });\n   };\n\n   return { handleClickLike, updatingLike };\n};\n\nexport default useClickLikeToComment;\n","import {\n   Menu,\n   MenuButton,\n   MenuList,\n   useColorModeValue,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { RiMoreLine } from 'react-icons/ri';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { saveToLocalStorage } from '../../helper/localStorage';\nimport {\n   setcommentItem,\n   setTransformedComments,\n} from '../../store/comment/currentComments';\nimport CustomMenuItem from '../../utils/CustomMenuItem';\n\n// I save all transformedData in localStorage because it navigate next page, so when reload the next page, I take them back from localStorage\n\nconst ManageComment = ({ commentId, postId, comments }) => {\n   const navigate = useNavigate();\n   const dispatch = useDispatch();\n\n   const currentComments = useSelector(\n      (state) => state.currentComments.currentComments\n   );\n\n   //helper funcs\n   // to edit\n   const setCurrentCommentItemHandler = () => {\n      let commentItem;\n\n      currentComments.forEach((comment) => {\n         if (comment.commentId === commentId) {\n            commentItem = comment;\n            return;\n         }\n\n         const innerComments = Object.values(comment.replies);\n         if (innerComments.find((cmt) => cmt.commentId === commentId)) {\n            commentItem = innerComments.find(\n               (cmt) => cmt.commentId === commentId\n            );\n         }\n      });\n\n      dispatch(setcommentItem({ ...commentItem, postId })); // also put postId to refrence when edit || delete\n\n      saveToLocalStorage(\n         'commentItemToManage',\n         JSON.stringify({ ...commentItem, postId })\n      );\n   };\n\n   //transform comment for delete\n   const transformedCommentsHandler = () => {\n      // filter comments without deleteId\n      const filteredComments = comments.filter(\n         (comment) => comment.commentId !== commentId\n      );\n\n      const transformedCommennts = filteredComments.map((comment) => {\n         // filter repliedComments without deleteId\n         const repliedComments = Object.values(comment.replies)\n            .sort((a, b) => a.createdAt - b.createdAt)\n            .filter((cmt) => cmt.commentId !== commentId);\n\n         // make commentId array without deleteId\n         const commentIds = [\n            comment.commentId,\n            ...repliedComments.map((cmt) => cmt.commentId),\n         ];\n\n         // remove id when repliedCommentId doesn't include in commentId array\n         repliedComments.forEach((cmt) => {\n            if (!commentIds.includes(cmt.repliedCommentId)) {\n               commentIds.splice(commentIds.indexOf(cmt.commentId), 1);\n            }\n         });\n\n         // filtered repliedComments which actually exitst in commentId array\n         const finalRepliedComments = repliedComments.filter((cmt) =>\n            commentIds.includes(cmt.commentId)\n         );\n\n         return {\n            ...comment,\n            replies: { ...finalRepliedComments },\n         };\n      });\n\n      dispatch(setTransformedComments(transformedCommennts));\n      saveToLocalStorage(\n         'transformedComments',\n         JSON.stringify(transformedCommennts)\n      );\n   };\n\n   const goToEdit = () => {\n      setCurrentCommentItemHandler();\n      navigate('/edit-comment');\n   };\n\n   const goToDelete = () => {\n      setCurrentCommentItemHandler();\n      transformedCommentsHandler();\n      navigate('/delete-comment');\n   };\n\n   const replyToColor = useColorModeValue('#8f8f8f', 'dark.colorTertiary');\n\n   return (\n      <Menu autoSelect={false} isLazy>\n         <MenuButton\n            bg='transparent'\n            p='0 3px'\n            h='24px'\n            borderRadius='5px'\n            _hover={{\n               bg: useColorModeValue('light.secondary', 'dark.secondary'),\n               color: useColorModeValue('light.primary', 'dark.primary'),\n            }}\n            color={replyToColor}\n         >\n            <RiMoreLine size={20} className='more-icon' />\n         </MenuButton>\n         <MenuList\n            minW='0'\n            w='170px'\n            p='.5rem'\n            bg={useColorModeValue('light.cardBg', 'dark.cardBg')}\n         >\n            <CustomMenuItem onClick={goToEdit}>Edit</CustomMenuItem>\n            <CustomMenuItem onClick={goToDelete}>Delete</CustomMenuItem>\n         </MenuList>\n      </Menu>\n   );\n};\n\nexport default ManageComment;\n","import React, { useEffect } from \"react\";\nimport {\n  Box,\n  Flex,\n  HStack,\n  Text,\n  useColorModeValue,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { ReactionButton } from \"../../utils/Buttons\";\nimport {\n  HeartIcon,\n  RedHeart,\n  CommentIcon,\n  AuthorIcon,\n} from \"../../assets/icons\";\nimport { dateFormat, showEditedDate } from \"../../helper/calcTimestamp\";\nimport { htmlToJsx } from \"../../helper/htmlToJsx\";\nimport converter from \"../../helper/converter\";\nimport CustomAvatar from \"../../utils/CustomAvatar\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport DiscussionBox from \"../discussion/DiscussionBox\";\nimport useClickLikeToComment from \"../../hooks/useClickLikeToComment\";\nimport ManageComment from \"./ManageComment\";\nimport { FiCornerLeftUp } from \"react-icons/fi\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoginAlert } from \"../../store/loginAlert\";\n\nconst CommentItem = ({\n  text,\n  createdAt,\n  currentUserProfile,\n  userId,\n  postId,\n  commentId,\n  comments,\n  likes,\n  authorId,\n  currentUserId,\n  ps,\n  footerPs,\n  avatarSize,\n  edited,\n  editedAt,\n  reply,\n  repliedUserName,\n}) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const [showDiscussionBox, setShowDiscussionbox] = useState(false);\n\n  const { handleClickLike, updatingLike } = useClickLikeToComment(\n    currentUserId,\n    postId\n  );\n\n  const handleViewProfile = (username) => {\n    navigate(`/${username}`);\n  };\n\n  const totalLike = likes.length;\n  const alreadyLiked = likes.includes(currentUserId);\n\n  const handleshowDiscussionBox = () => {\n    if (!currentUserId) {\n      dispatch(setLoginAlert(true));\n      return;\n    }\n\n    setShowDiscussionbox((prev) => !prev);\n  };\n\n  // auto focus when click reply\n  // give commentId for each comment item and when showDiscussionBox is true , select editor inside this specific id and focus it\n  useEffect(() => {\n    if (showDiscussionBox) {\n      document.querySelector(`#comment${commentId} .mde-text`).focus();\n    }\n  }, [showDiscussionBox, commentId]);\n\n  const reactionIconColor = useColorModeValue(\"#3d3d3d\", \"#d6d6d7\");\n  const ghostColor = useColorModeValue(\"light.ghostColor\", \"dark.ghostColor\");\n  const colorHover = useColorModeValue(\"light.colorHover\", \"dark.colorHover\");\n  const colorTertiary = useColorModeValue(\n    \"light.colorTertiary\",\n    \"dark.colorTertiary\"\n  );\n  const replyToColor = useColorModeValue(\"#8f8f8f\", \"dark.colorTertiary\");\n\n  return (\n    <VStack mb={[\".7rem\", \"1rem\"]} ps={ps} id={`comment${commentId}`}>\n      <Flex align=\"flex-start\" w=\"100%\">\n        <CustomAvatar\n          size={avatarSize}\n          profile={currentUserProfile?.profile}\n          onClick={() => handleViewProfile(currentUserProfile.username)}\n        />\n\n        <Box\n          boxShadow={useColorModeValue(\n            \"0 0 0 1px rgb(23 23 23 / 13%)\",\n            \"0 0 0 1px rgb(255 255 255 / 15%)\"\n          )}\n          p={{ base: \".5rem .7rem\", sm: \".5rem 1rem\" }}\n          borderRadius=\"5px\"\n          _hover={{\n            \".more-icon\": { fill: reactionIconColor },\n            \".arrow-up\": { color: reactionIconColor },\n          }}\n          w=\"100%\"\n          flex=\"1\"\n          ms=\".5rem\"\n          overflow=\"hidden\"\n        >\n          <Flex justify=\"space-between\" mb={2}>\n            <HStack align=\"center\" spacing=\"2px\">\n              <Text\n                fontSize=\"15px\"\n                fontWeight=\"900\"\n                cursor=\"pointer\"\n                color={ghostColor}\n                _hover={{ color: colorHover }}\n                onClick={() => handleViewProfile(currentUserProfile.username)}\n              >\n                {currentUserProfile.name}\n              </Text>\n\n              {authorId === userId && <AuthorIcon fill={reactionIconColor} />}\n\n              {/* show Date */}\n              <Text fontSize=\"12px\" color={colorTertiary}>\n                {\" \"}\n                • {dateFormat(createdAt)}{\" \"}\n                {edited && (\n                  <Text as=\"span\">\n                    {showEditedDate(createdAt, editedAt)\n                      ? `• Edited on ${dateFormat(editedAt)}`\n                      : \"• Edited\"}\n                  </Text>\n                )}\n              </Text>\n            </HStack>\n\n            {/* option menu */}\n            {currentUserId === userId && (\n              <ManageComment\n                commentId={commentId}\n                postId={postId}\n                comments={comments}\n              />\n            )}\n          </Flex>\n\n          <Box\n            fontSize={{ base: \"14px\", sm: \"16px\" }}\n            fontFamily=\"monospace\"\n            sx={{ p: { marginBottom: \"5px !important\" } }}\n          >\n            {reply && repliedUserName !== currentUserProfile.name && (\n              <Text\n                as=\"div\"\n                fontSize=\"13px\"\n                color={replyToColor}\n                mt=\"-7px !important\"\n                mb=\".5rem !important\"\n                fontFamily=\"sans-serif\"\n              >\n                <FiCornerLeftUp\n                  className=\"arrow-up\"\n                  style={{ display: \"inline-block\" }}\n                />{\" \"}\n                reply to {repliedUserName}\n              </Text>\n            )}\n\n            <Box className=\"mde-preview-content\">\n              {htmlToJsx(converter().makeHtml(text))}\n            </Box>\n          </Box>\n        </Box>\n      </Flex>\n\n      <Box w=\"100%\" ps={footerPs} mt=\".3rem !important\">\n        {!showDiscussionBox && (\n          <HStack justify=\"flex-start\">\n            <ReactionButton\n              value={totalLike < 1 ? \"\" : totalLike}\n              text={totalLike < 1 ? \"\" : totalLike > 1 ? \"likes\" : \"like\"}\n              disabled={updatingLike}\n              onClick={() => handleClickLike(comments, commentId)}\n            >\n              {alreadyLiked ? (\n                <RedHeart />\n              ) : (\n                <HeartIcon fill={reactionIconColor} />\n              )}\n            </ReactionButton>\n\n            <ReactionButton text=\"reply\" onClick={handleshowDiscussionBox}>\n              <CommentIcon fill={reactionIconColor} />\n            </ReactionButton>\n          </HStack>\n        )}\n\n        {showDiscussionBox && (\n          <DiscussionBox\n            postId={postId}\n            showDismiss={true}\n            onDismiss={handleshowDiscussionBox}\n            commentId={commentId}\n            repliedUserId={userId}\n          />\n        )}\n      </Box>\n    </VStack>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserProfileData } from '../../helper/getUserProfileData';\nimport CommentItem from './CommentItem';\nimport { useEffect } from 'react';\nimport { setCurrentComments } from '../../store/comment/currentComments';\nimport { useAuth } from '../../context/auth';\n\nconst AllComment = ({ postDetail }) => {\n   const dispatch = useDispatch();\n   const user = useAuth();\n\n   useEffect(() => {\n      dispatch(setCurrentComments(postDetail.comments));\n   }, [postDetail.comments, dispatch]);\n\n   const profileData = useSelector((state) => state.profileData.profileData);\n   const currentComments = useSelector(\n      (state) => state.currentComments.currentComments\n   );\n\n   const repliedComment = (replies) =>\n      Object.values(replies).sort((a, b) => a.createdAt - b.createdAt); //ascending ordered by created at;\n\n   return (\n      <Box mt='2rem'>\n         {postDetail.comments.map((comment) => (\n            <Box key={comment.commentId}>\n               <CommentItem\n                  avatarSize='30px'\n                  footerPs='37px'\n                  comments={currentComments}\n                  authorId={postDetail.userId}\n                  currentUserId={user?.userId}\n                  likes={comment.likes}\n                  text={comment.value}\n                  createdAt={comment.createdAt}\n                  currentUserProfile={getUserProfileData(\n                     profileData,\n                     comment.userId\n                  )}\n                  userId={comment.userId}\n                  postId={postDetail.id}\n                  commentId={comment.commentId}\n                  edited={comment.edited}\n                  editedAt={comment.editedAt}\n               />\n               {Object.values(comment.replies).length !== 0 &&\n                  repliedComment(comment.replies).map((item) => (\n                     <CommentItem\n                        key={item.commentId}\n                        comments={currentComments}\n                        authorId={postDetail.userId}\n                        currentUserId={user?.userId}\n                        likes={item.likes}\n                        ps='20px'\n                        avatarSize='28px'\n                        footerPs='35px'\n                        text={item.value}\n                        createdAt={item.createdAt}\n                        currentUserProfile={getUserProfileData(\n                           profileData,\n                           item.userId\n                        )}\n                        repliedUserName={\n                           getUserProfileData(profileData, item.repliedUserId)\n                              .name\n                        }\n                        userId={item.userId}\n                        postId={postDetail.id}\n                        commentId={item.commentId}\n                        edited={item.edited}\n                        editedAt={item.editedAt}\n                        reply={true}\n                     />\n                  ))}\n            </Box>\n         ))}\n      </Box>\n   );\n};\n\nexport default AllComment;\n","import React from \"react\";\nimport {\n  Box,\n  Divider,\n  Flex,\n  Heading,\n  HStack,\n  Image,\n  Text,\n  useColorModeValue,\n  Wrap,\n  WrapItem,\n} from \"@chakra-ui/react\";\nimport CustomAvatar from \"../../utils/CustomAvatar\";\nimport ManangePost from \"../post/ManangePost\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport LangTag from \"../../utils/LangTag\";\nimport { htmlToJsx } from \"../../helper/htmlToJsx\";\nimport converter from \"../../helper/converter\";\nimport Discussion from \"../discussion/Discussion\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../../context/auth\";\nimport AllComment from \"../comment/AllComment\";\nimport { dateFormat, showEditedDate } from \"../../helper/calcTimestamp\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useClickTag from \"../../hooks/useClickTag\";\nimport hljs from \"highlight.js\";\n\nconst MainContent = ({ postDetail }) => {\n  const navigate = useNavigate();\n  const user = useAuth();\n  const discussionBoxRef = useRef();\n\n  const { clickComment } = useSelector((state) => state.scrollDiscussion);\n  const handleClickTag = useClickTag();\n\n  // scroll to\n  useEffect(() => {\n    const scrollHeight =\n      window.pageYOffset +\n      discussionBoxRef.current?.getBoundingClientRect().top -\n      60;\n\n    if (clickComment) {\n      setTimeout(() => window.scrollTo({ top: scrollHeight }), 0);\n    } else {\n      window.scrollTo(0, 0);\n    }\n  }, [clickComment, postDetail.id]);\n\n  // syntax highlighting\n  useEffect(() => {\n    hljs.highlightAll();\n  }, [postDetail.id]);\n\n  const isAuthor = user?.userId === postDetail?.userId;\n\n  const dividerColor = useColorModeValue(\"light.cardBorder\", \"dark.cardBorder\");\n  const headingHover = useColorModeValue(\n    \"light.headingHover\",\n    \"dark.headingHover\"\n  );\n  const ghostColor = useColorModeValue(\"light.ghostColor\", \"dark.ghostColor\");\n  const colorTertiary = useColorModeValue(\n    \"light.colorTertiary\",\n    \"dark.colorTertiary\"\n  );\n\n  return (\n    <Box\n      m={{ base: \"0\", md: \"1px\" }}\n      className=\"shadow\"\n      borderRadius={{ base: \"0\", md: \"5px\" }}\n      bg={useColorModeValue(\"light.cardBg\", \"dark.cardBg\")}\n    >\n      {/* coverImgae */}\n      {postDetail.cvImg && (\n        <Image\n          src={postDetail.cvImg}\n          alt=\"cover_image\"\n          maxH=\"335px\"\n          width=\"100%\"\n          borderTopLeftRadius={{ base: \"none\", md: \"5px\" }}\n          borderTopRightRadius={{ base: \"none\", md: \"5px\" }}\n          objectFit=\"cover\"\n        />\n      )}\n\n      {/* content */}\n      <Box px={{ base: \".7rem\", md: \"2.5rem\" }} pb=\"1rem\" pt={3}>\n        <Box className=\"mde-preview\">\n          <Flex align=\"center\" justify=\"space-between\" gap=\".5rem\">\n            <HStack align=\"flex-start\">\n              <CustomAvatar\n                profile={postDetail.profile}\n                size=\"40px\"\n                onClick={() => navigate(`/${postDetail.username}`)}\n              />\n\n              <Box flex=\"1\" pt=\"3px\">\n                <Text\n                  fontWeight={600}\n                  cursor=\"pointer\"\n                  lineHeight={1.25}\n                  color={ghostColor}\n                  _hover={{ color: headingHover }}\n                  onClick={() => navigate(`/${postDetail.username}`)}\n                >\n                  {postDetail.name}\n                </Text>\n\n                {postDetail.draft && (\n                  <Text\n                    bg=\"#FCD34D\"\n                    color=\"dark.cardColor\"\n                    px=\"5px\"\n                    fontSize=\"12px\"\n                    rounded=\"sm\"\n                    display=\"inline-block\"\n                  >\n                    Draft\n                  </Text>\n                )}\n\n                {postDetail.createdAt && (\n                  <Text fontSize=\"12px\" color={colorTertiary}>\n                    Posted on {dateFormat(postDetail.createdAt)}{\" \"}\n                    {postDetail.updatedAt && (\n                      <Text as=\"span\">\n                        {showEditedDate(\n                          postDetail.createdAt,\n                          postDetail.updatedAt\n                        )\n                          ? `• Updated on ${dateFormat(postDetail.updatedAt)}`\n                          : \"• Updated\"}\n                      </Text>\n                    )}\n                  </Text>\n                )}\n              </Box>\n            </HStack>\n\n            {/* manage post */}\n            {isAuthor && postDetail && (\n              <ManangePost postId={postDetail.id} m=\"0 0 0 auto\" />\n            )}\n          </Flex>\n\n          <Heading my={2}>{postDetail.title}</Heading>\n\n          {postDetail.tags.length > 0 && (\n            <Wrap pt=\".3rem\" pb=\"1.5rem\" spacing=\".3rem\">\n              {postDetail.tags.map((tag) => (\n                <WrapItem\n                  key={nanoid()}\n                  onClick={(e) =>\n                    postDetail.draft\n                      ? () => {} // don't allow view tag if it's a draft\n                      : handleClickTag(e, tag.tagName)\n                  }\n                >\n                  <LangTag tag={tag} />\n                </WrapItem>\n              ))}\n            </Wrap>\n          )}\n\n          <Box\n            className=\"mde-preview-content\"\n            fontSize={[\"16px\", \"17px\", \"19px\"]}\n            fontFamily=\"monospace\"\n          >\n            {htmlToJsx(converter().makeHtml(postDetail.MDEValue))}\n          </Box>\n\n          {!postDetail.draft && (\n            <Divider mt={7} h=\"1px\" bg={dividerColor} mx=\"auto\" />\n          )}\n\n          {!postDetail.draft && (\n            <Discussion\n              discussionBoxRef={discussionBoxRef}\n              postId={postDetail.id}\n              comments={postDetail.comments}\n            />\n          )}\n\n          {postDetail.comments.length !== 0 && (\n            <AllComment postDetail={postDetail} />\n          )}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport DetailSkeleton from \"../skeletons/DetailSkeleton\";\nimport SideReactionBar from \"./SideReactionBar\";\nimport ErrorMessage from \"../../utils/ErrorMessage\";\nimport DetailRightContent from \"./DetailRightContent\";\nimport MainContent from \"./MainContent\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport \"../../styles/postdetail.scss\";\n\nconst DetailElements = ({\n  postDetail,\n  currentUserProfile,\n  loading,\n  err,\n  otherPosts,\n  trandingOnDevCommunity,\n}) => {\n  return (\n    <Box\n      maxW=\"1280px\"\n      w=\"100%\"\n      py=\"0\"\n      px={{ base: \"0\", md: \"1rem\" }}\n      mt={{ base: \"-.5rem !important\", md: \"0 !important\" }}\n      mb={{ md: \"2rem\" }}\n      flex=\"1\"\n    >\n      {!postDetail && loading && <DetailSkeleton />}\n\n      {!postDetail && !loading && !err && <ErrorMessage urlNotFound={true} />}\n\n      {!postDetail && !loading && err && <ErrorMessage offline={true} />}\n\n      {postDetail && (\n        <Flex flex={2} align=\"flex-start\">\n          <SideReactionBar postDetail={postDetail} />\n\n          <Box flex=\"2.1\" overflow=\"hidden\" pb=\"1px\">\n            <MainContent postDetail={postDetail} />\n\n            <DetailRightContent\n              currentUserProfile={currentUserProfile}\n              otherPosts={otherPosts}\n              userId={postDetail.userId}\n              display={{ base: \"block\", xl: \"none\" }}\n              m={{ base: \"1.5rem 0\", md: \"1.5rem 1px 0\" }}\n              trandingOnDevCommunity={trandingOnDevCommunity}\n            />\n          </Box>\n\n          <DetailRightContent\n            currentUserProfile={currentUserProfile}\n            otherPosts={otherPosts}\n            userId={postDetail.userId}\n            display={{ base: \"none\", xl: \"block\" }}\n            trandingOnDevCommunity={trandingOnDevCommunity}\n          />\n        </Flex>\n      )}\n    </Box>\n  );\n};\n\nexport default DetailElements;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport DetailElements from '../components/detail/DetailElements';\nimport { getPopularTags } from '../helper/getPopularTags';\nimport { getTopPostsByTag } from '../helper/getTopPostsByTag';\n\nconst PostDetails = () => {\n   const { title } = useParams();\n   const navigate = useNavigate();\n\n   // get postId from (title + postId)\n   const param = title.split('_');\n   const postId = param[param.length - 1];\n\n   const {\n      transformedData,\n      transformedDataLoading: loading,\n      transformedDataErr: err,\n   } = useSelector((state) => state.transformedData);\n\n   const profileData = useSelector((state) => state.profileData.profileData);\n\n   const postDetail = transformedData?.find(\n      (postData) => postData.id === postId\n   );\n\n   const currentUserProfile = profileData?.find(\n      (data) => data.id === postDetail?.userId\n   );\n\n   const otherPosts = transformedData\n      ?.filter(\n         (postData) =>\n            postData.userId === currentUserProfile?.id &&\n            postData.id !== postId &&\n            !postData.draft\n      )\n      .sort((a, b) => (b.heart?.length || 0) - (a.heart?.length || 0))\n      .slice(0, 3); // get just 3 most reaction post\n\n   const [popularTags] = getPopularTags(transformedData)\n      .map((tag) => tag.tagName)\n      .slice(0, 1); // get just top one tag\n\n   //to preview images\n   useEffect(() => {\n      if (postDetail) {\n         const imgfilteredTags = [\n            ...document.querySelectorAll('.mde-preview-content p img'),\n         ];\n\n         imgfilteredTags.forEach((img) => {\n            img.style.cursor = 'zoom-in';\n\n            img.addEventListener('click', () =>\n               navigate(`/preview/${encodeURIComponent(img.src)}`)\n            );\n         });\n      }\n   }, [postDetail, navigate, title]);\n\n   return (\n      <DetailElements\n         postDetail={postDetail}\n         loading={loading}\n         err={err}\n         currentUserProfile={currentUserProfile}\n         otherPosts={otherPosts}\n         trandingOnDevCommunity={getTopPostsByTag(\n            popularTags,\n            transformedData,\n            postId\n         )}\n      />\n   );\n};\n\nexport default PostDetails;\n"],"names":["onChange","onClick","document","querySelector","click","justify","m","cursor","w","h","pos","display","alignItems","justifyContent","className","opacity","visibility","type","accept","size","style","position","zIndex","customToolbarCommands","commands","getDefaultToolbarCommands","splice","codeBlock","name","icon","execute","opts","textApi","replaceSelection","MDE","MDEValue","setMDEValue","isSubmitting","setUploadingImg","useState","value","setValue","selectedTab","setSelectedTab","dispatch","useDispatch","useEffect","setMDEValueToStore","disabled","mdeImgUploadHandler","e","image","target","files","prevVal","replace","selectedImgPath","img","nanoid","uploadImage","then","url","catch","err","console","log","fontFamily","img_url","loadingPreview","toolbarCommands","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","converter","makeHtml","React","postId","commentId","showDismiss","onDismiss","valueToEdit","transformedComments","repliedUserId","user","useAuth","transformedData","useSelector","state","submitting","setSubmitting","uploadingImg","mdeTab","setMdeTab","comments","find","data","id","hasValue","trim","textArea","readOnly","checkUser","setLoginAlert","addEventListener","removeEventListener","querySelectorAll","map","textbox","idx","placeholder","hljs","shadow","useColorModeValue","boxBoxShadow","borderRadius","_focusWithin","boxShadow","overflow","minH","padding","fontSize","sx","p","marginBottom","htmlToJsx","mt","prev","preventDefault","createdAt","Timestamp","newComment","replies","userId","likes","modifiedComments","comment","Object","values","cmt","repliedCommentId","updateComment","_","setTimeout","removeFromLocalStorage","bg","mr","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","parse","require","html","skeletonColor","useSkeletonColor","px","mx","maxW","flex","noOfLines","spacing","isTouchDevice","window","navigator","MaxTouchPoints","msMaxTouchPoints","iconStyles","postTitle","reactionIconColor","toast","useToast","postURL","location","href","onCopy","useClipboard","handleShareVia","via","open","nativeShareVia","share","title","autoSelect","isLazy","_hover","as","fill","minW","base","CustomMenuItem","isActive","duration","status","isClosable","styles","direction","md","align","mb","postDetail","useClickReactToPost","heart","clickHeart","clickReactHandler","updatingHeart","updatingReact","unicorn","clickUnicorn","updatingUnicorn","saved","clickSave","updatingSave","alreadyHeart","includes","alreadyUnicorned","alreadySaved","totalHeart","length","totalUnicorn","totalSaved","height","width","bottom","left","top","gap","me","draft","color","border","svg","username","tags","isLastElement","navigate","useNavigate","handleNavigate","stopPropagation","setClickComment","titleRoute","handleClickTag","useClickTag","borderBottom","py","fontWeight","pt","tag","tagName","LangTag","currentUserProfile","otherPosts","trandingOnDevCommunity","cardColor","nameColor","postsToShow","ms","xl","UserProfilePopup","backgroundHeight","background","profile","bio","work","education","joined","currentUserId","followers","postData","discussionBoxRef","ref","calcTotalDiscussion","DiscussionBox","updatingLike","setUpdatingLike","handleClickLike","filter","setCurrentComments","currentComments","setCurrentCommentItemHandler","commentItem","forEach","innerComments","setcommentItem","saveToLocalStorage","JSON","stringify","replyToColor","transformedCommennts","repliedComments","sort","a","b","commentIds","indexOf","finalRepliedComments","setTransformedComments","transformedCommentsHandler","text","authorId","ps","footerPs","avatarSize","edited","editedAt","reply","repliedUserName","showDiscussionBox","setShowDiscussionbox","useClickLikeToComment","handleViewProfile","totalLike","alreadyLiked","handleshowDiscussionBox","focus","ghostColor","colorHover","colorTertiary","CustomAvatar","sm","dateFormat","showEditedDate","profileData","getUserProfileData","item","useRef","clickComment","scrollDiscussion","scrollHeight","pageYOffset","current","getBoundingClientRect","scrollTo","isAuthor","dividerColor","headingHover","cvImg","src","alt","maxH","borderTopLeftRadius","borderTopRightRadius","objectFit","pb","lineHeight","rounded","updatedAt","ManangePost","my","loading","ErrorMessage","urlNotFound","offline","useParams","param","split","transformedDataLoading","transformedDataErr","slice","getPopularTags","popularTags","encodeURIComponent","getTopPostsByTag"],"sourceRoot":""}