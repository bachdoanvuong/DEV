{"version":3,"file":"static/js/376.8e1f8793.chunk.js","mappings":"6QAyIA,UAzHe,WAAO,IAAD,EACZA,GAAOC,EAAAA,EAAAA,KACPC,GAAiBC,EAAAA,EAAAA,UAEjBC,GAAkBC,EAAAA,EAAAA,GAAsB,QAAU,IAGxDC,EAAAA,EAAAA,YAAU,kBAAMC,OAAOC,SAAS,EAAG,EAAzB,GAA6B,CAACJ,IAExC,OAIIK,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,eAAjB,IAHbA,EADH,EACGA,gBACwBC,EAF3B,EAEGC,uBACoBC,EAHvB,EAGGC,mBAGGC,GAAcP,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMM,YAAYA,WAA7B,IAE5BC,EAAc,MACdN,GAAoBC,GAAYE,IACjCG,EAAcN,EAAgBO,QAAO,SAACC,GAAD,OAAeA,EAASC,KAAxB,KAGxC,IAAMC,EAAgB,UAAGJ,SAAH,aAAG,EAAaC,QACnC,SAACC,GAAD,OACGA,EAASG,MAAMC,cAAcC,SAASpB,EAAgBmB,gBACtDJ,EAASM,KAAKF,cAAcC,SAASpB,EAAgBmB,cAFxD,IAKGG,GAAkBC,EAAAA,EAAAA,IACrB,qBACA,qBAEGC,GAASD,EAAAA,EAAAA,IAAkB,eAAgB,eAEjD,OAAIf,GAEE,UAAC,KAAD,CAAKiB,KAAK,IAAIC,EAAE,OAAOC,KAAK,QAA5B,WACG,SAAC,IAAD,KACA,SAAC,IAAD,KACA,SAAC,IAAD,OAKLjB,GACM,SAAC,IAAD,CAAckB,SAAS,KAI9B,UAAC,KAAD,CAAKH,KAAM,EAAGE,KAAM,CAAEE,KAAM,OAAQC,GAAI,SAAWJ,EAAE,OAArD,WACG,SAAC,IAAD,CACGK,IAAKjC,EACLE,gBAAiBA,EACjBgC,QAAS,CAAEH,KAAM,QAASC,GAAI,QAC9BG,GAAI,EACJC,MAAM,WAGRjB,GAAgD,IAA5BA,EAAiBkB,QACnC,gCACInC,IACE,UAAC,KAAD,CACGoC,SAAU,CAAEP,KAAM,SAAUC,GAAI,UAChCG,GAAI,EACJD,QAAS,CAAEH,KAAM,OAAQC,GAAI,SAHhC,iCAKwB,KACrB,SAAC,KAAD,CAAMO,GAAG,OAAOC,MAAOhB,EAAvB,SACItB,IACI,IARX,OAaFiB,EAAiBsB,KAAI,SAACxB,GAAD,aACnB,SAAC,IAAD,CAEGM,KAAMN,EAASM,KACfmB,SAAUzB,EAASyB,SACnBC,QAAS1B,EAAS0B,QAClBC,SAAU3B,EAAS4B,MACnBC,GAAI7B,EAAS6B,GACbC,UAAW9B,EAAS8B,UACpB3B,MAAOH,EAASG,MAChB4B,KAAM/B,EAAS+B,KACfC,SAAUhC,EAASgC,SACnBC,UAAS,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAUkC,QACrBC,OAAQnC,EAASmC,OACjBC,cAAa,OAAEvD,QAAF,IAAEA,OAAF,EAAEA,EAAMsD,OACrBE,WAAW,EACXC,oBAAoBC,EAAAA,EAAAA,GACjB1C,EACAG,EAASmC,QAEZK,iBAAiBC,EAAAA,EAAAA,IAAoBzC,EAAS0C,UAC9CC,eAAeC,EAAAA,EAAAA,IACZ5C,EAAS6C,MACT7C,EAAS8C,QACT9C,EAAS+C,OAEZA,MAAO/C,EAAS+C,MAChBC,aAAY,UAAEhD,EAAS+C,aAAX,aAAE,EAAgB1C,SAAhB,OAAyBxB,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMsD,SAzBxCnC,EAAS6B,GAFE,QAgCzB,SAAC,KAAD,CACGoB,GAAI,EACJC,EAAE,YACFC,UAAU,SACVC,aAAa,MACbC,GAAI5C,EACJ6C,UAAU,SANb,wDAaX,C","sources":["components/search/Search.jsx"],"sourcesContent":["import { Box, Heading, Text, useColorModeValue } from '@chakra-ui/react';\nimport React, { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAuth } from '../../context/auth';\nimport {\n   calcTotalDiscussion,\n   calculateReaction,\n} from '../../helper/calculateTotal';\nimport { getUserProfileData } from '../../helper/getUserProfileData';\nimport useGetQuerySearchTerm from '../../hooks/useGetQuerySearchTerm';\nimport ErrorMessage from '../../utils/ErrorMessage';\nimport PostItem from '../post/PostItem';\nimport PostItemSkeleton from '../skeletons/PostItemSkeleton';\nimport SearchInput from './SearchInput';\n\nconst Search = () => {\n   const user = useAuth();\n   const searchInputRef = useRef();\n\n   const querySearchTerm = useGetQuerySearchTerm('spq') || '';\n\n   // scroll top\n   useEffect(() => window.scrollTo(0, 0), [querySearchTerm]);\n\n   const {\n      transformedData,\n      transformedDataLoading: loading,\n      transformedDataErr: err,\n   } = useSelector((state) => state.transformedData);\n\n   const profileData = useSelector((state) => state.profileData.profileData);\n\n   let allPostData = null;\n   if (transformedData && !loading && !err) {\n      allPostData = transformedData.filter((postData) => !postData.draft);\n   }\n\n   const searchedPostData = allPostData?.filter(\n      (postData) =>\n         postData.title.toLowerCase().includes(querySearchTerm.toLowerCase()) ||\n         postData.name.toLowerCase().includes(querySearchTerm.toLowerCase())\n   );\n\n   const searchTermColor = useColorModeValue(\n      'light.headingHover',\n      'dark.headingHover'\n   );\n   const cardBg = useColorModeValue('light.cardBg', 'dark.cardBg');\n\n   if (loading) {\n      return (\n         <Box flex='1' w='100%' maxW='650px'>\n            <PostItemSkeleton />\n            <PostItemSkeleton />\n            <PostItemSkeleton />\n         </Box>\n      );\n   }\n\n   if (err) {\n      return <ErrorMessage offline={true} />;\n   }\n\n   return (\n      <Box flex={1} maxW={{ base: '100%', md: '650px' }} w='100%'>\n         <SearchInput\n            ref={searchInputRef}\n            querySearchTerm={querySearchTerm}\n            display={{ base: 'block', md: 'none' }}\n            mb={5}\n            route='search'\n         />\n\n         {searchedPostData && searchedPostData.length !== 0 ? (\n            <>\n               {querySearchTerm && (\n                  <Heading\n                     fontSize={{ base: '1.3rem', md: '1.5rem' }}\n                     mb={4}\n                     display={{ base: 'none', md: 'block' }}\n                  >\n                     Search results for '{' '}\n                     <Text as='span' color={searchTermColor}>\n                        {querySearchTerm}\n                     </Text>{' '}\n                     '\n                  </Heading>\n               )}\n\n               {searchedPostData.map((postData) => (\n                  <PostItem\n                     key={postData.id}\n                     name={postData.name}\n                     username={postData.username}\n                     profile={postData.profile}\n                     coverImg={postData.cvImg}\n                     id={postData.id}\n                     createdAt={postData.createdAt}\n                     title={postData.title}\n                     tags={postData.tags}\n                     readTime={postData.readTime}\n                     isUpdated={postData?.updated}\n                     userId={postData.userId}\n                     currentUserId={user?.userId} // authenticated userId\n                     showHover={true}\n                     currentUserProfile={getUserProfileData(\n                        profileData,\n                        postData.userId\n                     )}\n                     totalDiscussion={calcTotalDiscussion(postData.comments)}\n                     totalReaction={calculateReaction(\n                        postData.heart,\n                        postData.unicorn,\n                        postData.saved\n                     )}\n                     saved={postData.saved}\n                     alreadySaved={postData.saved?.includes(user?.userId)}\n                  />\n               ))}\n            </>\n         ) : (\n            <Box\n               mt={5}\n               p='5rem 1rem'\n               textAlign='center'\n               borderRadius='5px'\n               bg={cardBg}\n               className='shadow'\n            >\n               No results match that query ðŸ¤”\n            </Box>\n         )}\n      </Box>\n   );\n};\n\nexport default Search;\n"],"names":["user","useAuth","searchInputRef","useRef","querySearchTerm","useGetQuerySearchTerm","useEffect","window","scrollTo","useSelector","state","transformedData","loading","transformedDataLoading","err","transformedDataErr","profileData","allPostData","filter","postData","draft","searchedPostData","title","toLowerCase","includes","name","searchTermColor","useColorModeValue","cardBg","flex","w","maxW","offline","base","md","ref","display","mb","route","length","fontSize","as","color","map","username","profile","coverImg","cvImg","id","createdAt","tags","readTime","isUpdated","updated","userId","currentUserId","showHover","currentUserProfile","getUserProfileData","totalDiscussion","calcTotalDiscussion","comments","totalReaction","calculateReaction","heart","unicorn","saved","alreadySaved","mt","p","textAlign","borderRadius","bg","className"],"sourceRoot":""}