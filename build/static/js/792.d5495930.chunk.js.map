{"version":3,"file":"static/js/792.d5495930.chunk.js","mappings":"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","sources":["hooks/useFollowTag.js","pages/tags/viewTag/Header.jsx","pages/tags/viewTag/TagDetail.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAuth } from '../context/auth';\nimport { updateProfileData } from '../lib/api';\nimport { setLoginAlert } from '../store/loginAlert';\n\nconst useFollowTag = (profileData) => {\n   const user = useAuth();\n   const userId = user?.userId;\n   const dispatch = useDispatch();\n\n   const [loading, setLoading] = useState(false);\n\n   const followTagHandler = async (tagName) => {\n      if (!user) {\n         dispatch(setLoginAlert(true));\n         return;\n      }\n\n      setLoading(true);\n\n      const currentUserProfile = profileData.find((data) => data.id === userId);\n\n      const tags = currentUserProfile.followingTags || [];\n\n      const transformedFollowingTags = tags.includes(tagName)\n         ? tags.filter((tagname) => tagname !== tagName)\n         : [...tags, tagName];\n\n      updateProfileData({ followingTags: transformedFollowingTags }, userId)\n         .then((_) => {\n            setLoading(false);\n            // console.log('followed tag successfully');\n         })\n         .catch((err) => {\n            setLoading(false);\n            console.log(err);\n         });\n   };\n\n   return { followTagHandler, loading };\n};\n\nexport default useFollowTag;\n","import React from 'react';\nimport {\n   Box,\n   Heading,\n   HStack,\n   Image,\n   Text,\n   useColorModeValue,\n} from '@chakra-ui/react';\nimport { LightBtn, PrimaryBtn } from '../../../utils/Buttons';\nimport useFollowTag from '../../../hooks/useFollowTag';\n\nconst Header = ({\n   logo,\n   tagName,\n   description,\n   brandColor,\n   userId,\n   profileData,\n   loading,\n}) => {\n   const { followTagHandler, loading: followLoading } =\n      useFollowTag(profileData);\n\n   const handleClickFollow = () => followTagHandler(tagName);\n\n   const currentUserProfile = profileData?.find((data) => data.id === userId);\n   const alreadyFollow = currentUserProfile?.followingTags?.includes(tagName);\n\n   return (\n      <Box\n         borderRadius={{ base: 0, md: '5px' }}\n         bg={useColorModeValue('light.cardBg', 'dark.cardBg')}\n         className='shadow'\n         borderTop={`1rem solid ${brandColor}`}\n         p={{ base: '.7rem', md: '1.5rem' }}\n      >\n         <HStack align='flex-start'>\n            {logo && (\n               <Image\n                  src={logo}\n                  boxSize='64px'\n                  transform='rotate(-25deg)'\n                  alt='tag_logo'\n               />\n            )}\n\n            <Box flex={1}>\n               <HStack w='100%' justify='space-between'>\n                  <Heading\n                     textTransform='capitalize'\n                     fontSize='1.5rem'\n                     flex={1}\n                     overflowWrap='anywhere'\n                  >\n                     {tagName}\n                  </Heading>\n\n                  {!loading && (\n                     <>\n                        {alreadyFollow ? (\n                           <LightBtn\n                              w='auto'\n                              m='0'\n                              disabled={followLoading}\n                              onClick={handleClickFollow}\n                           >\n                              Following\n                           </LightBtn>\n                        ) : (\n                           <PrimaryBtn\n                              bg='light.primary'\n                              disabled={followLoading}\n                              onClick={handleClickFollow}\n                           >\n                              Follow\n                           </PrimaryBtn>\n                        )}\n                     </>\n                  )}\n               </HStack>\n\n               {description && (\n                  <Text maxW={{ base: '100%', md: '75%' }} mt={2}>\n                     {description}\n                  </Text>\n               )}\n            </Box>\n         </HStack>\n      </Box>\n   );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { isPrebuiltTag } from '../../../helper/isPrebuiltTag';\nimport { useEffect } from 'react';\nimport Header from './Header';\nimport { useSelector } from 'react-redux';\nimport PostItem from '../../../components/post/PostItem';\nimport { useAuth } from '../../../context/auth';\nimport { getUserProfileData } from '../../../helper/getUserProfileData';\nimport {\n   calcTotalDiscussion,\n   calculateReaction,\n} from '../../../helper/calculateTotal';\nimport PostItemSkeleton from '../../../components/skeletons/PostItemSkeleton';\nimport ErrorMessage from '../../../utils/ErrorMessage';\nimport SortNavbar from '../../../components/sortNavbar/SortNavbar';\nimport { sortPosts } from '../../../helper/sortPosts';\n\nconst TagDetail = () => {\n   const { tagName } = useParams();\n   const user = useAuth();\n   const navigate = useNavigate();\n   const location = useLocation();\n\n   //scroll top\n   useEffect(() => window.scrollTo(0, 0), [tagName]);\n\n   const tag = isPrebuiltTag(tagName) || {\n      brandColor: '#3B49DF',\n      tagName: tagName,\n   };\n\n   const { profileData, profileDataLoading } = useSelector(\n      (state) => state.profileData\n   );\n\n   const {\n      transformedData,\n      transformedDataLoading: loading,\n      transformedDataErr: err,\n   } = useSelector((state) => state.transformedData);\n\n   let allPostData = [];\n   if (transformedData) {\n      allPostData = transformedData.filter(\n         (postData) =>\n            !postData.draft &&\n            postData.tags.length &&\n            postData.tags.find((tag) => tag.tagName === tagName)\n      );\n   }\n\n   const handleClickNavItem = (value) => {\n      if (value === 'relevant') {\n         navigate(`/tags/${tagName}`);\n         return;\n      }\n\n      navigate(`/tags/${tagName}/?sort=${value}`);\n   };\n\n   const queryParam = new URLSearchParams(location.search);\n   const sort = queryParam.get('sort');\n\n   // sorting posts =>  [relevant | latest | top]\n   const currentPosts = sortPosts(sort, allPostData);\n\n   return (\n      <Box\n         flex='1'\n         w='100%'\n         maxW='1280px'\n         px={{ md: '1rem' }}\n         mt={{ base: '-.5rem', md: '0' }}\n      >\n         <Header\n            {...tag}\n            userId={user?.userId}\n            profileData={profileData}\n            loading={profileDataLoading}\n         />\n\n         <Box maxW={{ base: '100%', md: '650px' }} margin='auto' mt={5}>\n            {/* navbar */}\n            <SortNavbar handleClickNavItem={handleClickNavItem} />\n\n            {loading && (\n               <>\n                  <PostItemSkeleton />\n                  <PostItemSkeleton />\n                  <PostItemSkeleton />\n               </>\n            )}\n\n            {err && <ErrorMessage offline={true} />}\n\n            {currentPosts.map((postData) => (\n               <PostItem\n                  key={postData.id}\n                  name={postData.name}\n                  username={postData.username}\n                  profile={postData.profile}\n                  coverImg={postData.cvImg}\n                  id={postData.id}\n                  createdAt={postData.createdAt}\n                  title={postData.title}\n                  tags={postData.tags}\n                  readTime={postData.readTime}\n                  isUpdated={postData?.updated}\n                  userId={postData.userId}\n                  currentUserId={user?.userId} // authenticated userId\n                  showHover={true}\n                  currentUserProfile={getUserProfileData(\n                     profileData,\n                     postData.userId\n                  )}\n                  totalDiscussion={calcTotalDiscussion(postData.comments)}\n                  totalReaction={calculateReaction(\n                     postData.heart,\n                     postData.unicorn,\n                     postData.saved\n                  )}\n                  saved={postData.saved}\n                  alreadySaved={postData.saved?.includes(user?.userId)}\n               />\n            ))}\n         </Box>\n      </Box>\n   );\n};\n\nexport default TagDetail;\n"],"names":["profileData","user","useAuth","userId","dispatch","useDispatch","useState","loading","setLoading","followTagHandler","tagName","setLoginAlert","currentUserProfile","find","data","id","tags","followingTags","transformedFollowingTags","includes","filter","tagname","updateProfileData","then","_","catch","err","console","log","logo","description","brandColor","useFollowTag","followLoading","handleClickFollow","alreadyFollow","borderRadius","base","md","bg","useColorModeValue","className","borderTop","p","align","src","boxSize","transform","alt","flex","w","justify","textTransform","fontSize","overflowWrap","m","disabled","onClick","maxW","mt","useParams","navigate","useNavigate","location","useLocation","useEffect","window","scrollTo","tag","isPrebuiltTag","useSelector","state","profileDataLoading","transformedData","transformedDataLoading","transformedDataErr","allPostData","postData","draft","length","sort","URLSearchParams","search","get","currentPosts","sortPosts","px","margin","SortNavbar","handleClickNavItem","value","PostItemSkeleton","ErrorMessage","offline","map","PostItem","name","username","profile","coverImg","cvImg","createdAt","title","readTime","isUpdated","updated","currentUserId","showHover","getUserProfileData","totalDiscussion","calcTotalDiscussion","comments","totalReaction","calculateReaction","heart","unicorn","saved","alreadySaved"],"sourceRoot":""}