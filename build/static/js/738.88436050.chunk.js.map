{"version":3,"file":"static/js/738.88436050.chunk.js","mappings":"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","sources":["utils/MDEToolbarImgIcon.jsx","components/MDE.jsx","helper/converter.js","helper/htmlToJsx.js","hooks/useClickOutside.js","components/AddCvImg.jsx","components/TagSuggestion/AddLangTag.jsx","components/LeavePageAlert.jsx","utils/NoTitleMessage.jsx","components/post/PostPreview.jsx","components/post/CreatePostForm.jsx","hooks/useCreatePost.js","pages/CreatePost.jsx"],"sourcesContent":["import { Box, Input } from '@chakra-ui/react';\nimport React from 'react';\nimport { BsCardImage } from 'react-icons/bs';\n\nconst MDEToolbarImgIcon = ({ onChange }) => {\n   const handleClick = () => {\n      document.querySelector('.toolbar_img_command').click();\n   };\n\n   return (\n      <Box\n         onClick={handleClick}\n         justify='center'\n         m='0'\n         cursor='pointer'\n         w='35px'\n         h='30px'\n         pos='absolute'\n         display='flex'\n         alignItems='center'\n         justifyContent='center'\n      >\n         <Input\n            className='toolbar_img_command'\n            opacity={0}\n            visibility='hidden'\n            w='0'\n            h='0'\n            type='file'\n            accept='image/jpeg, image/png, image/jpg , image/webp, image/gif'\n            onChange={onChange}\n         />\n         <BsCardImage\n            size={20}\n            style={{ position: 'absolute', cursor: 'pointer', zIndex: '1' }}\n         />\n      </Box>\n   );\n};\n\nexport default MDEToolbarImgIcon;\n","import React, { useEffect, useState } from \"react\";\nimport ReactMde from \"react-mde\";\nimport { useDispatch } from \"react-redux\";\nimport { getDefaultToolbarCommands } from \"react-mde\";\nimport { Box } from \"@chakra-ui/react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { uploadImage } from \"../lib/api\";\nimport converter from \"../helper/converter\";\nimport MDEToolbarImgIcon from \"../utils/MDEToolbarImgIcon\";\nimport { setMDEValueToStore } from \"../store/post/postData\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport \"../styles/customizeMDE.scss\";\nimport { BsCodeSquare } from \"react-icons/bs\";\n\nconst customToolbarCommands = () => {\n  const commands = getDefaultToolbarCommands();\n  commands[1].splice(3, 1, \"code-block\", \"img_url\");\n  return commands;\n};\n\nconst codeBlock = {\n  name: \"code-block\",\n  icon: () => <BsCodeSquare size={18} style={{ position: \"absolute\" }} />,\n  execute: (opts) => {\n    opts.textApi.replaceSelection(\"```\\n Enter code here... \\n```\");\n  },\n};\n\nconst MDE = ({ MDEValue, setMDEValue, isSubmitting, setUploadingImg }) => {\n  const [value, setValue] = useState(MDEValue || \"\");\n  const [selectedTab, setSelectedTab] = useState(\"write\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (setMDEValue) {\n      setMDEValue(value); //for comment\n    } else {\n      dispatch(setMDEValueToStore(value)); //for postData to publish or edit\n    }\n  }, [value, dispatch, setMDEValue]);\n\n  useEffect(() => {\n    if (!MDEValue) {\n      setValue(MDEValue);\n    } // setting MDEValue to useState doesn't trigger again after initial render so I set empty string to value if it's empty\n  }, [MDEValue]);\n\n  useEffect(() => {\n    if (isSubmitting) {\n      document.querySelector(\".mde-text\").disabled = true;\n    } else {\n      document.querySelector(\".mde-text\").disabled = false;\n    }\n  }, [isSubmitting]);\n\n  const mdeImgUploadHandler = (e) => {\n    const image = e.target.files[0];\n\n    if (image) {\n      document.querySelector(\".mde-text\").disabled = true;\n      setUploadingImg(true);\n      setValue((prevVal) =>\n        prevVal.replace(\"![](img_url)\", \"![](uploading...)\")\n      );\n\n      const selectedImgPath = `images/${img.name}${nanoid()}`;\n\n      uploadImage(image, selectedImgPath)\n        .then((url) => {\n          document.querySelector(\".mde-text\").disabled = false;\n\n          setValue((prevVal) =>\n            prevVal.replace(\"![](uploading...)\", `![](${url})`)\n          );\n\n          setUploadingImg(false);\n        })\n        .catch((err) => console.log(err));\n\n      e.target.value = \"\"; // otherwise input event doesn't trigger again when user add the same file\n    }\n  };\n\n  const img = {\n    name: \"image_url\",\n    icon: () => <MDEToolbarImgIcon onChange={mdeImgUploadHandler} />,\n    execute: (opts) => {\n      opts.textApi.replaceSelection(\"![](img_url)\");\n    },\n  };\n\n  return (\n    <Box w=\"100%\" fontFamily=\"monospace\">\n      <ReactMde\n        commands={{\n          \"code-block\": codeBlock,\n          img_url: img,\n        }}\n        loadingPreview=\"loading...\"\n        toolbarCommands={customToolbarCommands()}\n        value={value}\n        onChange={setValue}\n        selectedTab={selectedTab}\n        onTabChange={setSelectedTab}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter().makeHtml(markdown))\n        }\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(MDE);\n","import * as Showdown from 'showdown';\n\nconst converter = () => {\n   const converter = new Showdown.Converter({\n      tables: true,\n      simplifiedAutoLink: true,\n      strikethrough: true,\n      tasklists: true,\n   });\n   return converter;\n};\n\nexport default converter;\n","const parse = require('html-react-parser');\n\nexport const htmlToJsx = (html) => {\n   const reactElement = parse(html);\n   return reactElement;\n};\n","import { useEffect } from 'react';\n\nconst useClickOutside = (setState, classes) => {\n   useEffect(() => {\n      const func = (e) => {\n         e.stopPropagation();\n\n         const classListArr = [...e.target.classList];\n\n         const hasClass =\n            classListArr.some((className) => classes.includes(className)) ||\n            classListArr.length === 0;\n\n         // length === 0 takes effect when choosing hue color in color picker element which has no class. so set the state to false and close color picker after picking hue color\n\n         if (hasClass) {\n            setState(true);\n         } else {\n            setState(false);\n         }\n      };\n\n      document.addEventListener('click', func);\n\n      return () => document.removeEventListener('click', func);\n   }, [setState, classes]);\n};\n\nexport default useClickOutside;\n","import {\n   Button,\n   Flex,\n   HStack,\n   Image,\n   Input,\n   Spinner,\n   Text,\n   Tooltip,\n   useColorModeValue,\n} from '@chakra-ui/react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeImage, uploadImage } from '../lib/api';\nimport { setCvImgToStore } from '../store/post/postData';\nimport { SecondaryBtn } from '../utils/Buttons';\n\nconst AddCvImg = ({ cvImgFromLocalStorage, setUploadingImg }) => {\n   const [cvImg, setCvImg] = useState(cvImgFromLocalStorage || '');\n\n   const [uploading, setUploading] = useState(false);\n\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n      dispatch(setCvImgToStore(cvImg));\n   }, [cvImg, dispatch]);\n\n   const handleCVImageUpload = (e) => {\n      const image = e.target.files[0];\n      if (image) {\n         cvImg && removeImage(cvImg);\n\n         const selectedImgPath = `images/${image.name}${nanoid()}`;\n         setUploading(true);\n         setUploadingImg(true);\n\n         uploadImage(image, selectedImgPath)\n            .then((url) => {\n               setUploading(false);\n               setUploadingImg(false);\n               setCvImg(url);\n            })\n            .catch((err) => console.log(err));\n      }\n   };\n\n   const handleCVImgRemove = (url) => {\n      setCvImg('');\n      removeImage(url).catch((err) => console.log(err));\n   };\n\n   const borderColor = useColorModeValue('#d6d6d7', '#3d3d3d');\n   const spinnerColor = useColorModeValue(\n      'light.headingHover',\n      'dark.headingHover'\n   );\n\n   return (\n      <Flex mb='1rem' justify='flex-start' align='center' flexWrap='wrap'>\n         {uploading && (\n            <HStack>\n               <Spinner color={spinnerColor} size='md' />\n               <Text letterSpacing='1px'>Uploading...</Text>\n            </HStack>\n         )}\n\n         {!uploading && cvImg && (\n            <Image\n               src={cvImg}\n               alt='cover_image'\n               w='250px'\n               h='105px'\n               objectFit='scale-down'\n               mr='1rem'\n               borderRadius='5px'\n            />\n         )}\n\n         {!uploading && (\n            <Flex mt='1'>\n               <Tooltip\n                  label='Use a ratio of 100:42 for best result.'\n                  aria-label='A tooltip'\n                  borderRadius='3px'\n               >\n                  <Button\n                     as='label'\n                     border='2px solid'\n                     borderColor={borderColor}\n                     m='0'\n                     p={2}\n                     fontWeight={400}\n                     cursor='pointer'\n                  >\n                     <Input\n                        display='none'\n                        type='file'\n                        accept='image/jpeg, image/png, image/jpg , image/webp, image/gif'\n                        onChange={handleCVImageUpload}\n                     />\n                     {cvImg ? 'change' : 'Add a cover image'}\n                  </Button>\n               </Tooltip>\n\n               {cvImg && (\n                  <SecondaryBtn\n                     color='red'\n                     hoverColor='red'\n                     onClick={() => handleCVImgRemove(cvImg)}\n                     m='0 0 0 .5rem'\n                  >\n                     Remove\n                  </SecondaryBtn>\n               )}\n            </Flex>\n         )}\n      </Flex>\n   );\n};\n\nexport default React.memo(AddCvImg);\n","import React, { useEffect, useRef, useState } from 'react';\nimport LangTag from '../../utils/LangTag';\nimport { useDispatch } from 'react-redux';\nimport { Box, Flex, Input, Wrap, WrapItem } from '@chakra-ui/react';\nimport tagSuggestions from './tagSuggestion.json';\nimport { setTagsToStore } from '../../store/post/postData';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { VscChromeClose } from 'react-icons/vsc';\nimport useClickOutside from '../../hooks/useClickOutside';\n\nconst AddLangTag = ({ filteredTagsFromLocalStorage }) => {\n   //states\n   const [tagData, setTagData] = useState(tagSuggestions);\n   const [filterTagName, setFilterTagName] = useState('');\n   const [focusTagInput, setFocusTagInput] = useState(false);\n   const [filteredTags, setFilteredTags] = useState(\n      filteredTagsFromLocalStorage || []\n   );\n\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n      dispatch(setTagsToStore(filteredTags));\n   }, [filteredTags, dispatch]);\n\n   //refs\n   const inputTagRef = useRef();\n\n   //handle click outside to close suggesstion box\n   useClickOutside(setFocusTagInput, ['suggestion-box', 'tag-input']);\n\n   //showing tag suggestion\n   const tagsToShow = () => {\n      if (filterTagName === '') {\n         return;\n      }\n\n      const searchedTags = tagData.filter((tag) =>\n         tag.tagName.toLowerCase().includes(filterTagName.toLowerCase())\n      );\n\n      return searchedTags;\n   };\n\n   const filteredTagsToShow = () => {\n      const tags = filteredTags.map((tag) => (\n         <WrapItem key={nanoid()} pos='relative'>\n            <LangTag\n               tag={tag}\n               onDeleteTag={() => handleDeleteTag(tag)}\n               showCloseIcon={true}\n            >\n               <VscChromeClose size={20} />\n            </LangTag>\n         </WrapItem>\n      ));\n\n      return tags;\n   };\n\n   const addToFilteredTags = (tag) => {\n      setFilteredTags((prevArr) => [...prevArr, tag]);\n      setTagData((prevArr) =>\n         prevArr.filter((item) => item.tagName !== tag.tagName)\n      );\n   };\n\n   const handleAddLangTag = (tag) => {\n      addToFilteredTags(tag);\n      setFilterTagName('');\n      inputTagRef.current.focus();\n\n      setTimeout(() => setFocusTagInput(true), 100); // two setState trigger once and doesn't get true\n   };\n\n   const handleDeleteTag = (tag) => {\n      setFilteredTags((prevArr) =>\n         prevArr.filter((item) => item.tagName !== tag.tagName)\n      );\n\n      if (tag.isCustomTag) {\n         return;\n      }\n\n      setTagData((prevArr) => [...prevArr, tag]);\n   };\n\n   // generating tag icon\n   const suggestions = () => {\n      if (tagsToShow()) {\n         const alreadyInTag = filteredTags.find(\n            (tag) => tag.tagName === filterTagName\n         );\n\n         const transformedTags = alreadyInTag\n            ? [...tagsToShow()]\n            : [{ tagName: filterTagName, isCustomTag: true }, ...tagsToShow()];\n\n         return transformedTags.map((tag) => (\n            <WrapItem key={nanoid()}>\n               <LangTag onAddTag={() => handleAddLangTag(tag)} tag={tag} />\n            </WrapItem>\n         ));\n      }\n   };\n\n   // showSuggestionBox\n   const showSuggestionBox = focusTagInput && tagsToShow() ? 'flex' : 'none';\n\n   const tagInputPlaceHolder = `Add tag ( ${4 - filteredTags.length} )`;\n\n   return (\n      <>\n         <Box mb={3}>\n            <Wrap overflow='visible'>\n               {filteredTagsToShow()}\n\n               {filteredTags.length !== 4 && (\n                  <WrapItem maxW='120px'>\n                     <Input\n                        h='34px'\n                        w='100%'\n                        px='.5rem'\n                        className='tag-input'\n                        ref={inputTagRef}\n                        placeholder={tagInputPlaceHolder}\n                        borderRadius='5px'\n                        value={filterTagName}\n                        onChange={({ target }) =>\n                           setFilterTagName(target.value)\n                        }\n                     />\n                  </WrapItem>\n               )}\n            </Wrap>\n         </Box>\n\n         <Flex\n            wrap='wrap'\n            gap='.5rem'\n            display={showSuggestionBox}\n            w='100%'\n            className='suggestion-box shadowSecondary'\n            m='0 auto 1rem'\n            p={3}\n            overflow='auto'\n            borderRadius='5px'\n            maxH='6rem'\n         >\n            {suggestions()}\n         </Flex>\n      </>\n   );\n};\n\nexport default React.memo(AddLangTag);\n","import {\n   Box,\n   Modal,\n   ModalBody,\n   ModalCloseButton,\n   ModalContent,\n   ModalHeader,\n   ModalOverlay,\n   useColorModeValue,\n   useDisclosure,\n} from '@chakra-ui/react';\nimport { VscClose } from 'react-icons/vsc';\nimport { useNavigate } from 'react-router-dom';\nimport { BtnDefault, BtnRed, SecondaryBtn } from '../utils/Buttons';\n\nconst LeavePageAlert = () => {\n   const { isOpen, onOpen, onClose } = useDisclosure();\n\n   const navigate = useNavigate();\n\n   return (\n      <>\n         <SecondaryBtn onClick={onOpen}>\n            <VscClose size={23} />\n         </SecondaryBtn>\n         <Modal\n            isCentered\n            onClose={onClose}\n            isOpen={isOpen}\n            motionPreset='none'\n            closeOnOverlayClick={false}\n            size={{ base: 'full', md: '2xl' }}\n         >\n            <ModalOverlay />\n            <ModalContent\n               bg={useColorModeValue('light.cardBg', 'dark.cardBg')}\n               className='shadow'\n            >\n               <ModalHeader\n                  borderBottom='1px solid'\n                  borderBottomColor={useColorModeValue(\n                     'light.cardBorder',\n                     'dark.cardBorder'\n                  )}\n                  p='1rem'\n               >\n                  You have unsaved changes\n               </ModalHeader>\n               <ModalCloseButton />\n               <ModalBody mt='1rem' p='.5rem 1rem'>\n                  You've made changes to your post. Do you want to navigate to\n                  leave this page?\n                  <Box mt={5} mb={3}>\n                     <BtnRed mr={2} onClick={() => navigate(-1)}>\n                        Leave the page\n                     </BtnRed>\n\n                     <BtnDefault onClick={onClose}>Keep editing</BtnDefault>\n                  </Box>\n               </ModalBody>\n            </ModalContent>\n         </Modal>\n      </>\n   );\n};\n\nexport default LeavePageAlert;\n","import { Text, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nconst NoTitleMessage = () => {\n   return (\n      <Text\n         px='.5rem'\n         fontSize='15px'\n         letterSpacing='.5px'\n         background={useColorModeValue('#FBE9E9', '#3E1A1A')}\n         color='red'\n         my='.5rem'\n      >\n         Title can't be blank!\n      </Text>\n   );\n};\n\nexport default NoTitleMessage;\n","import { Box, Heading, Image, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport converter from \"../../helper/converter\";\nimport { htmlToJsx } from \"../../helper/htmlToJsx\";\nimport LangTag from \"../../utils/LangTag\";\nimport NoTitleMessage from \"../../utils/NoTitleMessage\";\nimport \"../../styles/postdetail.scss\";\nimport hljs from \"highlight.js\";\n\nconst PostPreview = () => {\n  const { cvImg, title, tags, MDEValue } = useSelector(\n    (state) => state.postData\n  );\n\n  useEffect(() => {\n    hljs.highlightAll();\n  }, []);\n\n  return (\n    <Box\n      h={{ base: \"calc(100vh - 140px)\", md: \"calc(100vh - 160px)\" }}\n      overflowY=\"auto\"\n      fontFamily=\"monospace\"\n      fontSize={{ base: \"1rem\", sm: \"1.1rem\" }}\n      className=\"mde-preview\"\n    >\n      {cvImg && (\n        <Image\n          src={cvImg}\n          alt=\"cover_image\"\n          w=\"100%\"\n          maxH=\"300px\"\n          objectFit=\"cover\"\n        />\n      )}\n      {title ? <Heading my={2}>{title}</Heading> : <NoTitleMessage />}\n\n      <Wrap pt=\".3rem\" pb=\"1.5rem\" spacing={2} fontFamily=\"sans-serif\">\n        {tags.map((tag) => (\n          <WrapItem key={nanoid()}>\n            <LangTag tag={tag} />\n          </WrapItem>\n        ))}\n      </Wrap>\n\n      <Box className=\"mde-preview-content\" fontSize={[\"16px\", \"17px\", \"19px\"]}>\n        {htmlToJsx(converter().makeHtml(MDEValue))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default PostPreview;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  HStack,\n  Image,\n  Input,\n  Spinner,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { PrimaryBtn, SecondaryBtn } from \"../../utils/Buttons\";\nimport AddCvImg from \"../AddCvImg\";\nimport AddLangTag from \"../TagSuggestion/AddLangTag\";\nimport MDE from \"../MDE\";\nimport logo from \"../../assets/images/logo.png\";\nimport LeavePageAlert from \"../LeavePageAlert\";\nimport { useNavigate } from \"react-router-dom\";\nimport PostPreview from \"./PostPreview\";\nimport NoTitleMessage from \"../../utils/NoTitleMessage\";\n\nconst CreatePostForm = ({\n  publishPostHandler,\n  draftPostHandler,\n  eidtPostHandler,\n  setPostTitle,\n  postTitle,\n  postData,\n  pageTitle,\n  publishing,\n  savingDraft,\n  uploadingImg,\n  setUploadingImg,\n  toEdit,\n}) => {\n  const naviagte = useNavigate();\n\n  const [touch, setTouch] = useState(false);\n  const [mdeTab, setMdeTab] = useState(\"write\");\n\n  const mdeTabChangeHandler = (tabName) => {\n    setMdeTab(tabName);\n  };\n\n  const isToEdit = toEdit && !postData.draft;\n\n  const onSubmit = (handler) => {\n    setTouch(true);\n\n    if (postTitle) {\n      handler();\n    }\n  };\n\n  //set placeholder\n  useEffect(() => {\n    if (mdeTab === \"write\") {\n      document.querySelector(\".mde-text\").placeholder =\n        \"Write your post content here...\";\n    }\n  }, [mdeTab]);\n\n  return (\n    <Box\n      mt=\"-3.5rem\"\n      sx={{ \"input, textarea\": { background: \"transparent !important\" } }}\n    >\n      <Box maxW=\"768px\" m=\"auto\">\n        {/* navbar */}\n        <Box display=\"flex\" mx={{ base: \".5rem\", lg: \"0rem\" }}>\n          <Box\n            display={{ base: \"none\", md: \"flex\" }}\n            alignItems=\"center\"\n            mr=\"auto\"\n          >\n            <Image\n              src={logo}\n              cursor=\"pointer\"\n              alt=\"logo\"\n              h=\"40px\"\n              onClick={() => naviagte(\"/\")}\n            />\n            <Text fontSize=\"xl\" ms=\"1\">\n              {pageTitle} Post\n            </Text>\n          </Box>\n          <Box ms=\"auto\">\n            <SecondaryBtn onClick={() => mdeTabChangeHandler(\"write\")}>\n              Edit\n            </SecondaryBtn>\n            <SecondaryBtn\n              m=\"0 1rem 0 .5rem\"\n              onClick={() => mdeTabChangeHandler(\"preview\")}\n              disabled={uploadingImg}\n            >\n              Preview\n            </SecondaryBtn>\n            <LeavePageAlert />\n          </Box>\n        </Box>\n\n        {/* body */}\n        <Box height=\"calc(100vh - 110px)\" overflow=\"auto\">\n          <Box\n            align=\"start\"\n            bg={useColorModeValue(\"light.cardBg\", \"dark.cardBg\")}\n            className=\"shadow\"\n            borderRadius=\"5px\"\n            mt={{ base: \".5rem\", md: \"1rem\" }}\n            p={{ base: \".5rem\", md: \"1rem\" }}\n          >\n            {mdeTab === \"write\" && (\n              <Box w=\"100%\">\n                <AddCvImg\n                  cvImgFromLocalStorage={postData?.cvImg}\n                  setUploadingImg={setUploadingImg}\n                />\n\n                <Input\n                  variant=\"unstyled\"\n                  ps=\".5rem\"\n                  placeholder=\"New post title here...\"\n                  bg=\"transparent !important\"\n                  fontSize={{ base: \"2rem\", md: \"2.5rem\" }}\n                  fontWeight=\"700\"\n                  value={postTitle}\n                  height=\"60px\"\n                  _focus={{\n                    border: \"none !important\",\n                    boxShadow: \"none !important\",\n                  }}\n                  m=\"0\"\n                  required\n                  onChange={({ target }) => setPostTitle(target.value)}\n                  _placeholder={{ color: \"#525252\" }}\n                />\n                {touch && !postTitle && <NoTitleMessage />}\n\n                <AddLangTag filteredTagsFromLocalStorage={postData?.tags} />\n\n                <Box w=\"100%\" mt=\".5rem !important\">\n                  <MDE\n                    MDEValue={postData?.MDEValue}\n                    isSubmitting={publishing || savingDraft}\n                    setUploadingImg={setUploadingImg}\n                  />\n                </Box>\n              </Box>\n            )}\n\n            {mdeTab === \"preview\" && <PostPreview />}\n          </Box>\n        </Box>\n\n        {/* buttons container */}\n        <HStack\n          justify=\"flex-end\"\n          w=\"100%\"\n          py=\".5rem\"\n          px=\".5rem\"\n          pos=\"sticky\"\n          bottom=\"0\"\n          zIndex=\"1\"\n          bg={useColorModeValue(\"light.bg\", \"dark.bg\")}\n        >\n          {!isToEdit && (\n            <SecondaryBtn\n              onClick={() => onSubmit(draftPostHandler)}\n              disabled={savingDraft || publishing || uploadingImg}\n            >\n              {savingDraft ? (\n                <>\n                  <Spinner size=\"sm\" mr=\"1\" /> Saving draft\n                </>\n              ) : (\n                \"Save draft\"\n              )}\n            </SecondaryBtn>\n          )}\n\n          <PrimaryBtn\n            bg=\"light.primary\"\n            onClick={() =>\n              onSubmit(isToEdit ? eidtPostHandler : publishPostHandler)\n            }\n            disabled={publishing || savingDraft || uploadingImg}\n          >\n            {publishing ? (\n              <>\n                <Spinner size=\"sm\" mr=\"1\" />{\" \"}\n                {isToEdit ? \"Saving changes\" : \"Publishing\"}\n              </>\n            ) : (\n              <>{isToEdit ? \"Save changes\" : \"Publish\"}</>\n            )}\n          </PrimaryBtn>\n        </HStack>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CreatePostForm;\n","import { nanoid } from \"@reduxjs/toolkit\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context/auth\";\nimport {\n  getItemFromLocalStorage,\n  removeFromLocalStorage,\n  saveToLocalStorage,\n} from \"../helper/localStorage\";\nimport { createPost, deletePost, draftPost, editPost } from \"../lib/api\";\nimport { setTitleToStore } from \"../store/post/postData\";\n\nconst useCreatePost = (currentPostDataToEdit) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const user = useAuth();\n\n  //value from redux store\n  const postDataFromStore = useSelector((state) => state.postData);\n\n  const initialState = useMemo(\n    () => ({\n      cvImg: \"\",\n      title: \"\",\n      tags: [],\n      MDEValue: \"\",\n      userId: user?.userId,\n    }),\n    [user?.userId]\n  );\n\n  //states\n  const [postData, setPostData] = useState(\n    currentPostDataToEdit ||\n      getItemFromLocalStorage(\"postDataToPublish\") ||\n      initialState\n  );\n  const [title, setTitle] = useState(postData?.title || \"\");\n  const [uploadingImg, setUploadingImg] = useState(false);\n  const [publishing, setPublishing] = useState(false);\n  const [savingDraft, setSavingDraft] = useState(false);\n\n  //set title to store\n  useEffect(() => {\n    dispatch(setTitleToStore(title));\n  }, [title, dispatch]);\n\n  //set postData state everytime postData from store change\n  useEffect(() => {\n    const newData = {\n      cvImg: postDataFromStore.cvImg,\n      title: postDataFromStore.title,\n      tags: postDataFromStore.tags,\n      MDEValue: postDataFromStore.MDEValue,\n      userId: user?.userId,\n    };\n\n    setPostData((prevData) => ({ ...prevData, ...newData }));\n  }, [postDataFromStore, user?.userId]);\n\n  //save to localStorage\n  useEffect(() => {\n    saveToLocalStorage(\n      currentPostDataToEdit ? \"postDataToManage\" : \"postDataToPublish\",\n      JSON.stringify(postData)\n    );\n  }, [postData, currentPostDataToEdit]);\n\n  const publishPostHandler = () => {\n    setPublishing(true);\n\n    if (postData.draft) {\n      deletePost(postData.id);\n    }\n\n    //if post is a draft , It will have an id but It will be replced with firebase auto generated id when fetch data in [useGetData.js] file\n\n    createPost({ ...postData, draft: false })\n      .then((_) => {\n        setPublishing(false);\n        navigate(\"/dashboard\");\n        removeFromLocalStorage(\"postDataToPublish\");\n        removeFromLocalStorage(\"postDataToManage\");\n        // console.log('created post successfully');\n      })\n      .catch((err) => {\n        setPublishing(false);\n        console.log(err);\n      });\n  };\n\n  const draftPostHandler = () => {\n    setSavingDraft(true);\n\n    const route = postData.draft ? -1 : \"/dashboard/drafts\";\n\n    draftPost({\n      ...postData,\n      draft: true,\n      id: postData.id || nanoid().replaceAll(\"_\", \"-\"), // underscore must not include in postId because i split post url with underscore to get specific postId\n    })\n      .then((_) => {\n        setSavingDraft(false);\n        navigate(route);\n        removeFromLocalStorage(\"postDataToPublish\");\n        removeFromLocalStorage(\"postDataToManage\");\n        // console.log('drafted post successfully');\n      })\n      .catch((err) => {\n        setSavingDraft(false);\n        console.log(err);\n      });\n  };\n\n  const eidtPostHandler = () => {\n    setPublishing(true);\n\n    editPost({ ...postData, updated: true })\n      .then((_) => {\n        setPublishing(false);\n        navigate(-1);\n        removeFromLocalStorage(\"postDataToManage\");\n        // console.log('edited post successfully');\n      })\n      .catch((err) => {\n        setPublishing(false);\n        console.log(err);\n      });\n  };\n\n  return {\n    postData,\n    title,\n    setTitle,\n    publishing,\n    savingDraft,\n    uploadingImg,\n    setUploadingImg,\n    publishPostHandler,\n    draftPostHandler,\n    eidtPostHandler,\n  };\n};\n\nexport default useCreatePost;\n","import React, { useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport CreatePostForm from \"../components/post/CreatePostForm\";\nimport { useAuth } from \"../context/auth\";\nimport useCreatePost from \"../hooks/useCreatePost\";\n\nconst CreatePost = ({ currentPostDataToEdit }) => {\n  //scroll top\n  useEffect(() => window.scrollTo(0, 0), []);\n\n  const user = useAuth();\n\n  const {\n    postData,\n    title,\n    setTitle,\n    publishing,\n    savingDraft,\n    uploadingImg,\n    setUploadingImg,\n    publishPostHandler,\n    draftPostHandler,\n    eidtPostHandler,\n  } = useCreatePost(currentPostDataToEdit);\n\n  if (!user) {\n    return <Navigate to=\"/create-account\" replace />;\n  }\n\n  return (\n    <CreatePostForm\n      publishPostHandler={publishPostHandler}\n      draftPostHandler={draftPostHandler}\n      eidtPostHandler={eidtPostHandler}\n      setPostTitle={setTitle}\n      postTitle={title}\n      postData={postData}\n      pageTitle={currentPostDataToEdit ? \"Edit\" : \"Create\"}\n      publishing={publishing}\n      savingDraft={savingDraft}\n      uploadingImg={uploadingImg}\n      setUploadingImg={setUploadingImg}\n      toEdit={currentPostDataToEdit ? true : false}\n    />\n  );\n};\n\nexport default CreatePost;\n"],"names":["onChange","onClick","document","querySelector","click","justify","m","cursor","w","h","pos","display","alignItems","justifyContent","className","opacity","visibility","type","accept","size","style","position","zIndex","customToolbarCommands","commands","getDefaultToolbarCommands","splice","codeBlock","name","icon","execute","opts","textApi","replaceSelection","MDE","MDEValue","setMDEValue","isSubmitting","setUploadingImg","useState","value","setValue","selectedTab","setSelectedTab","dispatch","useDispatch","useEffect","setMDEValueToStore","disabled","mdeImgUploadHandler","e","image","target","files","prevVal","replace","selectedImgPath","img","nanoid","uploadImage","then","url","catch","err","console","log","fontFamily","img_url","loadingPreview","toolbarCommands","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","converter","makeHtml","React","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","parse","require","htmlToJsx","html","setState","classes","func","stopPropagation","classListArr","classList","hasClass","some","includes","length","addEventListener","removeEventListener","AddCvImg","cvImgFromLocalStorage","cvImg","setCvImg","uploading","setUploading","setCvImgToStore","borderColor","useColorModeValue","spinnerColor","mb","align","flexWrap","color","letterSpacing","src","alt","objectFit","mr","borderRadius","mt","label","as","border","p","fontWeight","removeImage","hoverColor","AddLangTag","filteredTagsFromLocalStorage","tagSuggestions","tagData","setTagData","filterTagName","setFilterTagName","focusTagInput","setFocusTagInput","filteredTags","setFilteredTags","setTagsToStore","inputTagRef","useRef","useClickOutside","tagsToShow","filter","tag","tagName","toLowerCase","handleAddLangTag","prevArr","item","addToFilteredTags","current","focus","setTimeout","handleDeleteTag","isCustomTag","showSuggestionBox","tagInputPlaceHolder","overflow","map","LangTag","onDeleteTag","showCloseIcon","maxW","px","ref","placeholder","wrap","gap","maxH","find","onAddTag","suggestions","useDisclosure","isOpen","onOpen","onClose","navigate","useNavigate","isCentered","motionPreset","closeOnOverlayClick","base","md","bg","borderBottom","borderBottomColor","fontSize","background","my","useSelector","state","postData","title","tags","hljs","overflowY","sm","pt","pb","spacing","publishPostHandler","draftPostHandler","eidtPostHandler","setPostTitle","postTitle","pageTitle","publishing","savingDraft","uploadingImg","toEdit","naviagte","touch","setTouch","mdeTab","setMdeTab","mdeTabChangeHandler","tabName","isToEdit","draft","onSubmit","handler","sx","mx","lg","logo","ms","height","variant","ps","_focus","boxShadow","required","_placeholder","py","bottom","currentPostDataToEdit","user","useAuth","postDataFromStore","initialState","useMemo","userId","getItemFromLocalStorage","setPostData","setTitle","setPublishing","setSavingDraft","setTitleToStore","newData","prevData","saveToLocalStorage","JSON","stringify","deletePost","id","createPost","_","removeFromLocalStorage","route","draftPost","replaceAll","editPost","updated","window","scrollTo","useCreatePost","to"],"sourceRoot":""}