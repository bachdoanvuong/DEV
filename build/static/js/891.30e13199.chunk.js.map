{"version":3,"file":"static/js/891.30e13199.chunk.js","mappings":"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","sources":["utils/MDEToolbarImgIcon.jsx","components/MDE.jsx","components/discussion/DiscussionBox.jsx","helper/converter.js","helper/htmlToJsx.js","pages/EditComment.jsx"],"sourcesContent":["import { Box, Input } from '@chakra-ui/react';\nimport React from 'react';\nimport { BsCardImage } from 'react-icons/bs';\n\nconst MDEToolbarImgIcon = ({ onChange }) => {\n   const handleClick = () => {\n      document.querySelector('.toolbar_img_command').click();\n   };\n\n   return (\n      <Box\n         onClick={handleClick}\n         justify='center'\n         m='0'\n         cursor='pointer'\n         w='35px'\n         h='30px'\n         pos='absolute'\n         display='flex'\n         alignItems='center'\n         justifyContent='center'\n      >\n         <Input\n            className='toolbar_img_command'\n            opacity={0}\n            visibility='hidden'\n            w='0'\n            h='0'\n            type='file'\n            accept='image/jpeg, image/png, image/jpg , image/webp, image/gif'\n            onChange={onChange}\n         />\n         <BsCardImage\n            size={20}\n            style={{ position: 'absolute', cursor: 'pointer', zIndex: '1' }}\n         />\n      </Box>\n   );\n};\n\nexport default MDEToolbarImgIcon;\n","import React, { useEffect, useState } from \"react\";\nimport ReactMde from \"react-mde\";\nimport { useDispatch } from \"react-redux\";\nimport { getDefaultToolbarCommands } from \"react-mde\";\nimport { Box } from \"@chakra-ui/react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { uploadImage } from \"../lib/api\";\nimport converter from \"../helper/converter\";\nimport MDEToolbarImgIcon from \"../utils/MDEToolbarImgIcon\";\nimport { setMDEValueToStore } from \"../store/post/postData\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport \"../styles/customizeMDE.scss\";\nimport { BsCodeSquare } from \"react-icons/bs\";\n\nconst customToolbarCommands = () => {\n  const commands = getDefaultToolbarCommands();\n  commands[1].splice(3, 1, \"code-block\", \"img_url\");\n  return commands;\n};\n\nconst codeBlock = {\n  name: \"code-block\",\n  icon: () => <BsCodeSquare size={18} style={{ position: \"absolute\" }} />,\n  execute: (opts) => {\n    opts.textApi.replaceSelection(\"```\\n Enter code here... \\n```\");\n  },\n};\n\nconst MDE = ({ MDEValue, setMDEValue, isSubmitting, setUploadingImg }) => {\n  const [value, setValue] = useState(MDEValue || \"\");\n  const [selectedTab, setSelectedTab] = useState(\"write\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (setMDEValue) {\n      setMDEValue(value); //for comment\n    } else {\n      dispatch(setMDEValueToStore(value)); //for postData to publish or edit\n    }\n  }, [value, dispatch, setMDEValue]);\n\n  useEffect(() => {\n    if (!MDEValue) {\n      setValue(MDEValue);\n    } // setting MDEValue to useState doesn't trigger again after initial render so I set empty string to value if it's empty\n  }, [MDEValue]);\n\n  useEffect(() => {\n    if (isSubmitting) {\n      document.querySelector(\".mde-text\").disabled = true;\n    } else {\n      document.querySelector(\".mde-text\").disabled = false;\n    }\n  }, [isSubmitting]);\n\n  const mdeImgUploadHandler = (e) => {\n    const image = e.target.files[0];\n\n    if (image) {\n      document.querySelector(\".mde-text\").disabled = true;\n      setUploadingImg(true);\n      setValue((prevVal) =>\n        prevVal.replace(\"![](img_url)\", \"![](uploading...)\")\n      );\n\n      const selectedImgPath = `images/${img.name}${nanoid()}`;\n\n      uploadImage(image, selectedImgPath)\n        .then((url) => {\n          document.querySelector(\".mde-text\").disabled = false;\n\n          setValue((prevVal) =>\n            prevVal.replace(\"![](uploading...)\", `![](${url})`)\n          );\n\n          setUploadingImg(false);\n        })\n        .catch((err) => console.log(err));\n\n      e.target.value = \"\"; // otherwise input event doesn't trigger again when user add the same file\n    }\n  };\n\n  const img = {\n    name: \"image_url\",\n    icon: () => <MDEToolbarImgIcon onChange={mdeImgUploadHandler} />,\n    execute: (opts) => {\n      opts.textApi.replaceSelection(\"![](img_url)\");\n    },\n  };\n\n  return (\n    <Box w=\"100%\" fontFamily=\"monospace\">\n      <ReactMde\n        commands={{\n          \"code-block\": codeBlock,\n          img_url: img,\n        }}\n        loadingPreview=\"loading...\"\n        toolbarCommands={customToolbarCommands()}\n        value={value}\n        onChange={setValue}\n        selectedTab={selectedTab}\n        onTabChange={setSelectedTab}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter().makeHtml(markdown))\n        }\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(MDE);\n","import React, { useEffect, useState } from \"react\";\nimport { Box, HStack, Spinner, useColorModeValue } from \"@chakra-ui/react\";\nimport converter from \"../../helper/converter\";\nimport { PrimaryBtn, SecondaryBtn } from \"../../utils/Buttons\";\nimport MDE from \"../MDE\";\nimport \"../../styles/customizeMDE.scss\";\nimport { htmlToJsx } from \"../../helper/htmlToJsx\";\nimport { updateComment } from \"../../lib/api\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Timestamp } from \"firebase/firestore\";\nimport { useAuth } from \"../../context/auth\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { removeFromLocalStorage } from \"../../helper/localStorage\";\nimport { setLoginAlert } from \"../../store/loginAlert\";\nimport hljs from \"highlight.js\";\n\nconst DiscussionBox = ({\n  postId,\n  commentId,\n  showDismiss,\n  onDismiss,\n  valueToEdit,\n  transformedComments,\n  repliedUserId,\n}) => {\n  const user = useAuth();\n  const dispatch = useDispatch();\n\n  const { transformedData } = useSelector((state) => state.transformedData);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [uploadingImg, setUploadingImg] = useState(false);\n  const [mdeTab, setMdeTab] = useState(\"write\");\n  const [MDEValue, setMDEValue] = useState(valueToEdit || \"\");\n\n  const comments = transformedData?.find(\n    (data) => data.id === postId\n  )?.comments;\n\n  const hasValue = MDEValue.trim();\n\n  const mdeTabChangeHandler = () => {\n    setMdeTab((prev) => (prev === \"write\" ? \"preview\" : \"write\"));\n  };\n\n  useEffect(() => {\n    const textArea = document.querySelector(\".mde-text\");\n\n    if (!user) {\n      document.querySelector(\".mde-header\").style.display = \"none\";\n      textArea.readOnly = true; // not allow cursor if not authenticated\n    }\n\n    const checkUser = () => {\n      if (!user) {\n        dispatch(setLoginAlert(true));\n      }\n    };\n\n    textArea?.addEventListener(\"click\", checkUser);\n\n    return () => textArea?.removeEventListener(\"click\", checkUser);\n  }, [user, dispatch]); // hide mde-header if user is not authenticated\n\n  // insert placeholder\n  useEffect(() => {\n    const textBoxes = [...document.querySelectorAll(\".mde-text\")];\n    textBoxes.map((textbox, idx) =>\n      idx === 0\n        ? (textbox.placeholder = \"Add to the discussion...\")\n        : (textbox.placeholder = \"Reply...\")\n    );\n  }, [mdeTab]);\n\n  useEffect(() => {\n    if (mdeTab === \"preview\") {\n      hljs.highlightAll();\n    }\n  }, [mdeTab]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitting(true);\n\n    const createdAt = Timestamp.now();\n    const newComment = {\n      value: MDEValue,\n      replies: {},\n      createdAt,\n      userId: user.userId,\n      commentId: nanoid(),\n      likes: [],\n    };\n\n    let modifiedComments = [];\n\n    if (valueToEdit) {\n      modifiedComments = transformedComments(comments, MDEValue);\n    } else if (commentId) {\n      modifiedComments = comments.map((comment) =>\n        comment.commentId === commentId ||\n        Object.values(comment.replies).find(\n          (cmt) => cmt.commentId === commentId\n        )\n          ? {\n              ...comment,\n              replies: {\n                ...comment.replies,\n                [nanoid()]: {\n                  ...newComment,\n                  repliedUserId,\n                  repliedCommentId: commentId,\n                },\n              },\n            }\n          : comment\n      );\n    } else {\n      modifiedComments = [...comments, newComment];\n    }\n\n    updateComment(modifiedComments, postId)\n      .then((_) => {\n        setSubmitting(false);\n        setMDEValue(\"\");\n        // onDismiss && onDismiss(); => close discussionBox immediately without accepting new state value\n        onDismiss && setTimeout(onDismiss, 100); // need new state value ('submitting = false') to disable || enable to MDE after state change\n        setMdeTab(\"write\");\n        removeFromLocalStorage(\"commentItemToManage\");\n        // console.log('added comment successfully');\n      })\n      .catch((err) => {\n        setSubmitting(false);\n        console.log(err);\n      });\n  };\n\n  const shadow = useColorModeValue(\n    \"0 0 0 1px rgb(212 212 212)\",\n    \"0 0 0 1px rgb(255 255 255 / 15%)\"\n  );\n\n  const boxBoxShadow = useColorModeValue(\n    \"0 0 0 2px rgb(59 73 223)\",\n    \"0 0 0 2px rgb(129 140 248) \"\n  );\n\n  return (\n    <Box className=\"mde-preview\">\n      {mdeTab === \"write\" && (\n        <Box\n          borderRadius=\"5px\"\n          _focusWithin={{\n            boxShadow: user && boxBoxShadow,\n          }}\n          boxShadow={shadow}\n          overflow=\"hidden\"\n          className=\"discussion-box mde-preview\"\n        >\n          <MDE\n            MDEValue={MDEValue}\n            setMDEValue={setMDEValue}\n            isSubmitting={submitting}\n            setUploadingImg={setUploadingImg}\n          />\n        </Box>\n      )}\n\n      {mdeTab === \"preview\" && (\n        <Box\n          minH=\"192px\"\n          borderRadius=\"5px\"\n          padding=\"10px !important\"\n          className=\"mde-preview-content\"\n          boxShadow={shadow}\n          fontSize={[\"1rem\", \"1.1rem\"]}\n          sx={{ p: { marginBottom: \"5px !important\" } }}\n        >\n          {htmlToJsx(converter().makeHtml(MDEValue))}\n        </Box>\n      )}\n\n      {/* buttons */}\n      <HStack justify=\"flex-end\" w=\"100%\" mt=\".5rem\">\n        {showDismiss && (\n          <SecondaryBtn\n            onClick={onDismiss}\n            disabled={uploadingImg || submitting}\n          >\n            Dismiss\n          </SecondaryBtn>\n        )}\n\n        <SecondaryBtn\n          disabled={\n            (!hasValue && mdeTab === \"write\") || uploadingImg || submitting\n          }\n          onClick={mdeTabChangeHandler}\n        >\n          {mdeTab === \"write\" ? \"Preview\" : \"Edit\"}\n        </SecondaryBtn>\n\n        <PrimaryBtn\n          onClick={handleSubmit}\n          bg=\"light.primary\"\n          disabled={!hasValue || uploadingImg || submitting}\n        >\n          {submitting ? (\n            <>\n              <Spinner size=\"sm\" mr=\"1\" /> Submitting\n            </>\n          ) : (\n            \"Submit\"\n          )}\n        </PrimaryBtn>\n      </HStack>\n    </Box>\n  );\n};\n\nexport default DiscussionBox;\n","import * as Showdown from 'showdown';\n\nconst converter = () => {\n   const converter = new Showdown.Converter({\n      tables: true,\n      simplifiedAutoLink: true,\n      strikethrough: true,\n      tasklists: true,\n   });\n   return converter;\n};\n\nexport default converter;\n","const parse = require('html-react-parser');\n\nexport const htmlToJsx = (html) => {\n   const reactElement = parse(html);\n   return reactElement;\n};\n","import { Box, Heading, HStack, useColorModeValue } from '@chakra-ui/react';\nimport { Timestamp } from 'firebase/firestore';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport DiscussionBox from '../components/discussion/DiscussionBox';\n\nconst EditComment = () => {\n   // scroll top\n   useEffect(() => window.scrollTo(0, 0), []);\n   const navigate = useNavigate();\n\n   const currentCommentItem = useSelector(\n      (state) => state.currentComments.commentItem\n   );\n\n   const cardBg = useColorModeValue('light.cardBg', 'dark.cardBg');\n\n   if (!currentCommentItem) {\n      return <Navigate to={-1} />;\n   }\n\n   const valueToEdit = currentCommentItem.value;\n\n   const onDismiss = () => {\n      navigate(-1);\n   };\n\n   const transformedComments = (comments, MDEValue) => {\n      const externalComments = comments.map((comment) =>\n         comment.commentId === currentCommentItem.commentId\n            ? {\n                 ...comment,\n                 value: MDEValue,\n                 edited: true,\n                 editedAt: Timestamp.now(),\n              }\n            : comment\n      );\n\n      return externalComments.map((comment) => ({\n         ...comment,\n         replies: {\n            ...Object.values(comment.replies).map((cmt) =>\n               cmt.commentId === currentCommentItem.commentId\n                  ? {\n                       ...cmt,\n                       value: MDEValue,\n                       edited: true,\n                       editedAt: Timestamp.now(),\n                    }\n                  : cmt\n            ),\n         },\n      }));\n   };\n\n   return (\n      <HStack px={{ md: '.5rem' }} flex='1' w='100%' justify='center'>\n         <Box\n            p={['1rem .5rem', '1rem .5rem', '2rem 2.5rem']}\n            maxW='900px'\n            w='100%'\n            borderRadius={{ md: '5px' }}\n            bg={cardBg}\n            className='shadow'\n         >\n            <Heading fontSize={['1.3rem', '1.7rem']} mb='1.5rem'>\n               Editing comment\n            </Heading>\n            <DiscussionBox\n               postId={currentCommentItem.postId}\n               commentId={currentCommentItem.commentId}\n               valueToEdit={valueToEdit}\n               onDismiss={onDismiss}\n               showDismiss={true}\n               transformedComments={transformedComments}\n            />\n         </Box>\n      </HStack>\n   );\n};\n\nexport default EditComment;\n"],"names":["onChange","onClick","document","querySelector","click","justify","m","cursor","w","h","pos","display","alignItems","justifyContent","className","opacity","visibility","type","accept","size","style","position","zIndex","customToolbarCommands","commands","getDefaultToolbarCommands","splice","codeBlock","name","icon","execute","opts","textApi","replaceSelection","MDE","MDEValue","setMDEValue","isSubmitting","setUploadingImg","useState","value","setValue","selectedTab","setSelectedTab","dispatch","useDispatch","useEffect","setMDEValueToStore","disabled","mdeImgUploadHandler","e","image","target","files","prevVal","replace","selectedImgPath","img","nanoid","uploadImage","then","url","catch","err","console","log","fontFamily","img_url","loadingPreview","toolbarCommands","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","converter","makeHtml","React","postId","commentId","showDismiss","onDismiss","valueToEdit","transformedComments","repliedUserId","user","useAuth","transformedData","useSelector","state","submitting","setSubmitting","uploadingImg","mdeTab","setMdeTab","comments","find","data","id","hasValue","trim","textArea","readOnly","checkUser","setLoginAlert","addEventListener","removeEventListener","querySelectorAll","map","textbox","idx","placeholder","hljs","shadow","useColorModeValue","boxBoxShadow","borderRadius","_focusWithin","boxShadow","overflow","minH","padding","fontSize","sx","p","marginBottom","htmlToJsx","mt","prev","preventDefault","createdAt","Timestamp","newComment","replies","userId","likes","modifiedComments","comment","Object","values","cmt","repliedCommentId","updateComment","_","setTimeout","removeFromLocalStorage","bg","mr","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","parse","require","html","window","scrollTo","navigate","useNavigate","currentCommentItem","currentComments","commentItem","cardBg","to","px","md","flex","maxW","mb","edited","editedAt"],"sourceRoot":""}